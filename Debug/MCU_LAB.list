
MCU_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026ec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080027f8  080027f8  000127f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002818  08002818  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08002818  08002818  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002818  08002818  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08002820  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000020  08002840  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002840  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080fe  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001545  00000000  00000000  00028147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00029690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002a040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162e3  00000000  00000000  0002a948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000096e2  00000000  00000000  00040c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081f4f  00000000  00000000  0004a30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc25c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ec  00000000  00000000  000cc2ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000020 	.word	0x20000020
 8000128:	00000000 	.word	0x00000000
 800012c:	080027e0 	.word	0x080027e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000024 	.word	0x20000024
 8000148:	080027e0 	.word	0x080027e0

0800014c <init_button>:

uint16_t button_map[no_of_btn] = {GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};


void init_button(int indx)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	keyPressFlag[indx] = 0;
 8000154:	4a17      	ldr	r2, [pc, #92]	; (80001b4 <init_button+0x68>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	2100      	movs	r1, #0
 800015a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	keyHoldFlag[indx] = 0;
 800015e:	4a16      	ldr	r2, [pc, #88]	; (80001b8 <init_button+0x6c>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	2100      	movs	r1, #0
 8000164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	timerForKeyPress[indx] = 0;
 8000168:	4a14      	ldr	r2, [pc, #80]	; (80001bc <init_button+0x70>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2100      	movs	r1, #0
 800016e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	keyReg[indx][0] = NORMAL_STATE;
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <init_button+0x74>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	011b      	lsls	r3, r3, #4
 8000178:	4413      	add	r3, r2
 800017a:	2201      	movs	r2, #1
 800017c:	601a      	str	r2, [r3, #0]
	keyReg[indx][1] = NORMAL_STATE;
 800017e:	4a10      	ldr	r2, [pc, #64]	; (80001c0 <init_button+0x74>)
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	011b      	lsls	r3, r3, #4
 8000184:	4413      	add	r3, r2
 8000186:	3304      	adds	r3, #4
 8000188:	2201      	movs	r2, #1
 800018a:	601a      	str	r2, [r3, #0]
	keyReg[indx][2] = NORMAL_STATE;
 800018c:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <init_button+0x74>)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	011b      	lsls	r3, r3, #4
 8000192:	4413      	add	r3, r2
 8000194:	3308      	adds	r3, #8
 8000196:	2201      	movs	r2, #1
 8000198:	601a      	str	r2, [r3, #0]
	keyReg[indx][3] = NORMAL_STATE;
 800019a:	4a09      	ldr	r2, [pc, #36]	; (80001c0 <init_button+0x74>)
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	011b      	lsls	r3, r3, #4
 80001a0:	4413      	add	r3, r2
 80001a2:	330c      	adds	r3, #12
 80001a4:	2201      	movs	r2, #1
 80001a6:	601a      	str	r2, [r3, #0]
}
 80001a8:	bf00      	nop
 80001aa:	370c      	adds	r7, #12
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	20000084 	.word	0x20000084
 80001b8:	20000090 	.word	0x20000090
 80001bc:	20000078 	.word	0x20000078
 80001c0:	20000048 	.word	0x20000048

080001c4 <keyPress>:


void keyPress(int indx)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
	keyPressFlag[indx] = 1;
 80001cc:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <keyPress+0x1c>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	2101      	movs	r1, #1
 80001d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001d6:	bf00      	nop
 80001d8:	370c      	adds	r7, #12
 80001da:	46bd      	mov	sp, r7
 80001dc:	bc80      	pop	{r7}
 80001de:	4770      	bx	lr
 80001e0:	20000084 	.word	0x20000084

080001e4 <keyHold>:
void keyHold(int indx)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	keyHoldFlag[indx] = 1;
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <keyHold+0x1c>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	2101      	movs	r1, #1
 80001f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001f6:	bf00      	nop
 80001f8:	370c      	adds	r7, #12
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	20000090 	.word	0x20000090

08000204 <keyRelease>:
void keyRelease(int indx)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	timerForKeyPress[indx] = 0;
 800020c:	4a07      	ldr	r2, [pc, #28]	; (800022c <keyRelease+0x28>)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	2100      	movs	r1, #0
 8000212:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	keyHoldFlag[indx] = 0;
 8000216:	4a06      	ldr	r2, [pc, #24]	; (8000230 <keyRelease+0x2c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2100      	movs	r1, #0
 800021c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000078 	.word	0x20000078
 8000230:	20000090 	.word	0x20000090

08000234 <getKeyInput>:

void getKeyInput(int indx)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	keyReg[indx][0] = keyReg[indx][1];
 800023c:	4a75      	ldr	r2, [pc, #468]	; (8000414 <getKeyInput+0x1e0>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	011b      	lsls	r3, r3, #4
 8000242:	4413      	add	r3, r2
 8000244:	3304      	adds	r3, #4
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4972      	ldr	r1, [pc, #456]	; (8000414 <getKeyInput+0x1e0>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	011b      	lsls	r3, r3, #4
 800024e:	440b      	add	r3, r1
 8000250:	601a      	str	r2, [r3, #0]
	keyReg[indx][1] = keyReg[indx][2];
 8000252:	4a70      	ldr	r2, [pc, #448]	; (8000414 <getKeyInput+0x1e0>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	011b      	lsls	r3, r3, #4
 8000258:	4413      	add	r3, r2
 800025a:	3308      	adds	r3, #8
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	496d      	ldr	r1, [pc, #436]	; (8000414 <getKeyInput+0x1e0>)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	011b      	lsls	r3, r3, #4
 8000264:	440b      	add	r3, r1
 8000266:	3304      	adds	r3, #4
 8000268:	601a      	str	r2, [r3, #0]
	keyReg[indx][2] = HAL_GPIO_ReadPin(btn1_GPIO_Port, button_map[indx]);
 800026a:	4a6b      	ldr	r2, [pc, #428]	; (8000418 <getKeyInput+0x1e4>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000272:	4619      	mov	r1, r3
 8000274:	4869      	ldr	r0, [pc, #420]	; (800041c <getKeyInput+0x1e8>)
 8000276:	f001 fa73 	bl	8001760 <HAL_GPIO_ReadPin>
 800027a:	4603      	mov	r3, r0
 800027c:	4619      	mov	r1, r3
 800027e:	4a65      	ldr	r2, [pc, #404]	; (8000414 <getKeyInput+0x1e0>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	011b      	lsls	r3, r3, #4
 8000284:	4413      	add	r3, r2
 8000286:	3308      	adds	r3, #8
 8000288:	6019      	str	r1, [r3, #0]
	// Only care about non-bounce
	if((keyReg[indx][0] == keyReg[indx][1]) && (keyReg[indx][1] == keyReg[indx][2]))
 800028a:	4a62      	ldr	r2, [pc, #392]	; (8000414 <getKeyInput+0x1e0>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	011b      	lsls	r3, r3, #4
 8000290:	4413      	add	r3, r2
 8000292:	681a      	ldr	r2, [r3, #0]
 8000294:	495f      	ldr	r1, [pc, #380]	; (8000414 <getKeyInput+0x1e0>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	011b      	lsls	r3, r3, #4
 800029a:	440b      	add	r3, r1
 800029c:	3304      	adds	r3, #4
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f040 80b2 	bne.w	800040a <getKeyInput+0x1d6>
 80002a6:	4a5b      	ldr	r2, [pc, #364]	; (8000414 <getKeyInput+0x1e0>)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	011b      	lsls	r3, r3, #4
 80002ac:	4413      	add	r3, r2
 80002ae:	3304      	adds	r3, #4
 80002b0:	681a      	ldr	r2, [r3, #0]
 80002b2:	4958      	ldr	r1, [pc, #352]	; (8000414 <getKeyInput+0x1e0>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	011b      	lsls	r3, r3, #4
 80002b8:	440b      	add	r3, r1
 80002ba:	3308      	adds	r3, #8
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	429a      	cmp	r2, r3
 80002c0:	f040 80a3 	bne.w	800040a <getKeyInput+0x1d6>
	{
		if((keyReg[indx][3] == NORMAL_STATE) && (keyReg[indx][1]  == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Released then Pressed
 80002c4:	4a53      	ldr	r2, [pc, #332]	; (8000414 <getKeyInput+0x1e0>)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	011b      	lsls	r3, r3, #4
 80002ca:	4413      	add	r3, r2
 80002cc:	330c      	adds	r3, #12
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d119      	bne.n	8000308 <getKeyInput+0xd4>
 80002d4:	4a4f      	ldr	r2, [pc, #316]	; (8000414 <getKeyInput+0x1e0>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	011b      	lsls	r3, r3, #4
 80002da:	4413      	add	r3, r2
 80002dc:	3304      	adds	r3, #4
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d111      	bne.n	8000308 <getKeyInput+0xd4>
		{
			keyReg[indx][3] = keyReg[indx][2];
 80002e4:	4a4b      	ldr	r2, [pc, #300]	; (8000414 <getKeyInput+0x1e0>)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	011b      	lsls	r3, r3, #4
 80002ea:	4413      	add	r3, r2
 80002ec:	3308      	adds	r3, #8
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	4948      	ldr	r1, [pc, #288]	; (8000414 <getKeyInput+0x1e0>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	011b      	lsls	r3, r3, #4
 80002f6:	440b      	add	r3, r1
 80002f8:	330c      	adds	r3, #12
 80002fa:	601a      	str	r2, [r3, #0]
			timerForKeyPress[indx] = 2; //
 80002fc:	4a48      	ldr	r2, [pc, #288]	; (8000420 <getKeyInput+0x1ec>)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	2102      	movs	r1, #2
 8000302:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000306:	e080      	b.n	800040a <getKeyInput+0x1d6>
		}
		else if((keyReg[indx][3] == PRESSED_STATE) && (keyReg[indx][1] == NORMAL_STATE))// Case: In the last 40ms, Read 2 accepted action: Pressed then Released
 8000308:	4a42      	ldr	r2, [pc, #264]	; (8000414 <getKeyInput+0x1e0>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	011b      	lsls	r3, r3, #4
 800030e:	4413      	add	r3, r2
 8000310:	330c      	adds	r3, #12
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d12c      	bne.n	8000372 <getKeyInput+0x13e>
 8000318:	4a3e      	ldr	r2, [pc, #248]	; (8000414 <getKeyInput+0x1e0>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	011b      	lsls	r3, r3, #4
 800031e:	4413      	add	r3, r2
 8000320:	3304      	adds	r3, #4
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d124      	bne.n	8000372 <getKeyInput+0x13e>
		{
			keyReg[indx][3] = keyReg[indx][2];
 8000328:	4a3a      	ldr	r2, [pc, #232]	; (8000414 <getKeyInput+0x1e0>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	011b      	lsls	r3, r3, #4
 800032e:	4413      	add	r3, r2
 8000330:	3308      	adds	r3, #8
 8000332:	681a      	ldr	r2, [r3, #0]
 8000334:	4937      	ldr	r1, [pc, #220]	; (8000414 <getKeyInput+0x1e0>)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	011b      	lsls	r3, r3, #4
 800033a:	440b      	add	r3, r1
 800033c:	330c      	adds	r3, #12
 800033e:	601a      	str	r2, [r3, #0]
			if(timerForKeyPress[indx] < 300)
 8000340:	4a37      	ldr	r2, [pc, #220]	; (8000420 <getKeyInput+0x1ec>)
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000348:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800034c:	da08      	bge.n	8000360 <getKeyInput+0x12c>
			{
				keyPress(indx);
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f7ff ff38 	bl	80001c4 <keyPress>
				timerForKeyPress[indx] = 0;
 8000354:	4a32      	ldr	r2, [pc, #200]	; (8000420 <getKeyInput+0x1ec>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2100      	movs	r1, #0
 800035a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(timerForKeyPress[indx] < 300)
 800035e:	e054      	b.n	800040a <getKeyInput+0x1d6>
			}
			else
			{
				keyRelease(indx);
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f7ff ff4f 	bl	8000204 <keyRelease>
				timerForKeyPress[indx] = 0;
 8000366:	4a2e      	ldr	r2, [pc, #184]	; (8000420 <getKeyInput+0x1ec>)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2100      	movs	r1, #0
 800036c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if(timerForKeyPress[indx] < 300)
 8000370:	e04b      	b.n	800040a <getKeyInput+0x1d6>
			}
		}
		else if((keyReg[indx][3] == PRESSED_STATE) && (keyReg[indx][1] == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Pressed then Pressed
 8000372:	4a28      	ldr	r2, [pc, #160]	; (8000414 <getKeyInput+0x1e0>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	011b      	lsls	r3, r3, #4
 8000378:	4413      	add	r3, r2
 800037a:	330c      	adds	r3, #12
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d127      	bne.n	80003d2 <getKeyInput+0x19e>
 8000382:	4a24      	ldr	r2, [pc, #144]	; (8000414 <getKeyInput+0x1e0>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	011b      	lsls	r3, r3, #4
 8000388:	4413      	add	r3, r2
 800038a:	3304      	adds	r3, #4
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d11f      	bne.n	80003d2 <getKeyInput+0x19e>
		{
			keyReg[indx][3] = keyReg[indx][2];
 8000392:	4a20      	ldr	r2, [pc, #128]	; (8000414 <getKeyInput+0x1e0>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	011b      	lsls	r3, r3, #4
 8000398:	4413      	add	r3, r2
 800039a:	3308      	adds	r3, #8
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	491d      	ldr	r1, [pc, #116]	; (8000414 <getKeyInput+0x1e0>)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	011b      	lsls	r3, r3, #4
 80003a4:	440b      	add	r3, r1
 80003a6:	330c      	adds	r3, #12
 80003a8:	601a      	str	r2, [r3, #0]
			timerForKeyPress[indx]++;
 80003aa:	4a1d      	ldr	r2, [pc, #116]	; (8000420 <getKeyInput+0x1ec>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b2:	1c5a      	adds	r2, r3, #1
 80003b4:	491a      	ldr	r1, [pc, #104]	; (8000420 <getKeyInput+0x1ec>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timerForKeyPress[indx] >= 300)
 80003bc:	4a18      	ldr	r2, [pc, #96]	; (8000420 <getKeyInput+0x1ec>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80003c8:	db1f      	blt.n	800040a <getKeyInput+0x1d6>
			{
				keyHold(indx);
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ff0a 	bl	80001e4 <keyHold>
			if(timerForKeyPress[indx] >= 300)
 80003d0:	e01b      	b.n	800040a <getKeyInput+0x1d6>
			}
		}
		else //Case: In the last 40ms, Read 2 accepted action: Released then Released
		{
			keyReg[indx][3] = keyReg[indx][2];
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <getKeyInput+0x1e0>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	011b      	lsls	r3, r3, #4
 80003d8:	4413      	add	r3, r2
 80003da:	3308      	adds	r3, #8
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	490d      	ldr	r1, [pc, #52]	; (8000414 <getKeyInput+0x1e0>)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	440b      	add	r3, r1
 80003e6:	330c      	adds	r3, #12
 80003e8:	601a      	str	r2, [r3, #0]
			timerForKeyPress[indx] = 0;
 80003ea:	4a0d      	ldr	r2, [pc, #52]	; (8000420 <getKeyInput+0x1ec>)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	2100      	movs	r1, #0
 80003f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			keyHoldFlag[indx] = 0;
 80003f4:	4a0b      	ldr	r2, [pc, #44]	; (8000424 <getKeyInput+0x1f0>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	2100      	movs	r1, #0
 80003fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			keyPressFlag[indx] = 0;
 80003fe:	4a0a      	ldr	r2, [pc, #40]	; (8000428 <getKeyInput+0x1f4>)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2100      	movs	r1, #0
 8000404:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000408:	e7ff      	b.n	800040a <getKeyInput+0x1d6>
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	20000048 	.word	0x20000048
 8000418:	2000000c 	.word	0x2000000c
 800041c:	40010800 	.word	0x40010800
 8000420:	20000078 	.word	0x20000078
 8000424:	20000090 	.word	0x20000090
 8000428:	20000084 	.word	0x20000084

0800042c <setTimer>:
int timer_counter[no_of_timers] = {0};

const int time_const = 1;

void setTimer(int duration, int indx)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	timer_counter[indx] = duration/time_const;
 8000436:	2201      	movs	r2, #1
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	fb93 f2f2 	sdiv	r2, r3, r2
 800043e:	4907      	ldr	r1, [pc, #28]	; (800045c <setTimer+0x30>)
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[indx] = 0;
 8000446:	4a06      	ldr	r2, [pc, #24]	; (8000460 <setTimer+0x34>)
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	2100      	movs	r1, #0
 800044c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000450:	bf00      	nop
 8000452:	370c      	adds	r7, #12
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	200000ac 	.word	0x200000ac
 8000460:	2000009c 	.word	0x2000009c

08000464 <timerRun>:

void timerRun(int indx)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	if(timer_counter[indx] > 0)
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <timerRun+0x48>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000474:	2b00      	cmp	r3, #0
 8000476:	dd13      	ble.n	80004a0 <timerRun+0x3c>
	{
		timer_counter[indx]--;
 8000478:	4a0c      	ldr	r2, [pc, #48]	; (80004ac <timerRun+0x48>)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	490a      	ldr	r1, [pc, #40]	; (80004ac <timerRun+0x48>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[indx] == 0)
 800048a:	4a08      	ldr	r2, [pc, #32]	; (80004ac <timerRun+0x48>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d104      	bne.n	80004a0 <timerRun+0x3c>
		{
			timer_flag[indx] = 1;
 8000496:	4a06      	ldr	r2, [pc, #24]	; (80004b0 <timerRun+0x4c>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2101      	movs	r1, #1
 800049c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 80004a0:	bf00      	nop
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bc80      	pop	{r7}
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	200000ac 	.word	0x200000ac
 80004b0:	2000009c 	.word	0x2000009c

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b8:	f000 fe66 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004bc:	f000 f809 	bl	80004d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c0:	f000 f88e 	bl	80005e0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80004c4:	f000 f840 	bl	8000548 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  custom_system_init();
 80004c8:	f000 f8ec 	bl	80006a4 <custom_system_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		fsm_traffic_master();
 80004cc:	f000 f99a 	bl	8000804 <fsm_traffic_master>
 80004d0:	e7fc      	b.n	80004cc <main+0x18>

080004d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b090      	sub	sp, #64	; 0x40
 80004d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d8:	f107 0318 	add.w	r3, r7, #24
 80004dc:	2228      	movs	r2, #40	; 0x28
 80004de:	2100      	movs	r1, #0
 80004e0:	4618      	mov	r0, r3
 80004e2:	f002 f975 	bl	80027d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
 80004ec:	605a      	str	r2, [r3, #4]
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	60da      	str	r2, [r3, #12]
 80004f2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004f4:	2302      	movs	r3, #2
 80004f6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f8:	2301      	movs	r3, #1
 80004fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004fc:	2310      	movs	r3, #16
 80004fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000500:	2300      	movs	r3, #0
 8000502:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000504:	f107 0318 	add.w	r3, r7, #24
 8000508:	4618      	mov	r0, r3
 800050a:	f001 f971 	bl	80017f0 <HAL_RCC_OscConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000514:	f000 fd8e 	bl	8001034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000518:	230f      	movs	r3, #15
 800051a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800051c:	2300      	movs	r3, #0
 800051e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000524:	2300      	movs	r3, #0
 8000526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2100      	movs	r1, #0
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fbdf 	bl	8001cf4 <HAL_RCC_ClockConfig>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800053c:	f000 fd7a 	bl	8001034 <Error_Handler>
  }
}
 8000540:	bf00      	nop
 8000542:	3740      	adds	r7, #64	; 0x40
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054e:	f107 0308 	add.w	r3, r7, #8
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000564:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <MX_TIM2_Init+0x94>)
 8000566:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800056a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800056c:	4b1b      	ldr	r3, [pc, #108]	; (80005dc <MX_TIM2_Init+0x94>)
 800056e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000572:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <MX_TIM2_Init+0x94>)
 8000576:	2200      	movs	r2, #0
 8000578:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <MX_TIM2_Init+0x94>)
 800057c:	2209      	movs	r2, #9
 800057e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_TIM2_Init+0x94>)
 8000582:	2200      	movs	r2, #0
 8000584:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_TIM2_Init+0x94>)
 8000588:	2200      	movs	r2, #0
 800058a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800058c:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_TIM2_Init+0x94>)
 800058e:	f001 fd17 	bl	8001fc0 <HAL_TIM_Base_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000598:	f000 fd4c 	bl	8001034 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a2:	f107 0308 	add.w	r3, r7, #8
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_TIM2_Init+0x94>)
 80005aa:	f001 fead 	bl	8002308 <HAL_TIM_ConfigClockSource>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80005b4:	f000 fd3e 	bl	8001034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	4619      	mov	r1, r3
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <MX_TIM2_Init+0x94>)
 80005c6:	f002 f875 	bl	80026b4 <HAL_TIMEx_MasterConfigSynchronization>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80005d0:	f000 fd30 	bl	8001034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000c4 	.word	0x200000c4

080005e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f4:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_GPIO_Init+0xb8>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a27      	ldr	r2, [pc, #156]	; (8000698 <MX_GPIO_Init+0xb8>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b25      	ldr	r3, [pc, #148]	; (8000698 <MX_GPIO_Init+0xb8>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0304 	and.w	r3, r3, #4
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	4b22      	ldr	r3, [pc, #136]	; (8000698 <MX_GPIO_Init+0xb8>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_GPIO_Init+0xb8>)
 8000612:	f043 0308 	orr.w	r3, r3, #8
 8000616:	6193      	str	r3, [r2, #24]
 8000618:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_GPIO_Init+0xb8>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	f003 0308 	and.w	r3, r3, #8
 8000620:	603b      	str	r3, [r7, #0]
 8000622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8000624:	2200      	movs	r2, #0
 8000626:	f641 61f0 	movw	r1, #7920	; 0x1ef0
 800062a:	481c      	ldr	r0, [pc, #112]	; (800069c <MX_GPIO_Init+0xbc>)
 800062c:	f001 f8af 	bl	800178e <HAL_GPIO_WritePin>
                          |e_Pin|d_Pin|c_Pin|b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, green2_Pin|yellow2_Pin|en1_Pin|f_Pin
 8000630:	2200      	movs	r2, #0
 8000632:	f24e 11e7 	movw	r1, #57831	; 0xe1e7
 8000636:	481a      	ldr	r0, [pc, #104]	; (80006a0 <MX_GPIO_Init+0xc0>)
 8000638:	f001 f8a9 	bl	800178e <HAL_GPIO_WritePin>
                          |a_Pin|g_Pin|en4_Pin|en3_Pin
                          |en2_Pin|status_led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : btn1_Pin btn2_Pin btn3_Pin */
  GPIO_InitStruct.Pin = btn1_Pin|btn2_Pin|btn3_Pin;
 800063c:	230e      	movs	r3, #14
 800063e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000644:	2301      	movs	r3, #1
 8000646:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000648:	f107 0308 	add.w	r3, r7, #8
 800064c:	4619      	mov	r1, r3
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <MX_GPIO_Init+0xbc>)
 8000650:	f000 ff0a 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : red1_Pin green1_Pin yellow1_Pin red2_Pin
                           e_Pin d_Pin c_Pin b_Pin */
  GPIO_InitStruct.Pin = red1_Pin|green1_Pin|yellow1_Pin|red2_Pin
 8000654:	f641 63f0 	movw	r3, #7920	; 0x1ef0
 8000658:	60bb      	str	r3, [r7, #8]
                          |e_Pin|d_Pin|c_Pin|b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2302      	movs	r3, #2
 8000664:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <MX_GPIO_Init+0xbc>)
 800066e:	f000 fefb 	bl	8001468 <HAL_GPIO_Init>

  /*Configure GPIO pins : green2_Pin yellow2_Pin en1_Pin f_Pin
                           a_Pin g_Pin en4_Pin en3_Pin
                           en2_Pin status_led_Pin */
  GPIO_InitStruct.Pin = green2_Pin|yellow2_Pin|en1_Pin|f_Pin
 8000672:	f24e 13e7 	movw	r3, #57831	; 0xe1e7
 8000676:	60bb      	str	r3, [r7, #8]
                          |a_Pin|g_Pin|en4_Pin|en3_Pin
                          |en2_Pin|status_led_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000678:	2301      	movs	r3, #1
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000680:	2302      	movs	r3, #2
 8000682:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000684:	f107 0308 	add.w	r3, r7, #8
 8000688:	4619      	mov	r1, r3
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_GPIO_Init+0xc0>)
 800068c:	f000 feec 	bl	8001468 <HAL_GPIO_Init>

}
 8000690:	bf00      	nop
 8000692:	3718      	adds	r7, #24
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	40010800 	.word	0x40010800
 80006a0:	40010c00 	.word	0x40010c00

080006a4 <custom_system_init>:

/* USER CODE BEGIN 4 */
void custom_system_init()
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	  traffic_state = 0;
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <custom_system_init+0x84>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
	  display_val1 = time_green/100;
 80006ae:	4b1f      	ldr	r3, [pc, #124]	; (800072c <custom_system_init+0x88>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <custom_system_init+0x8c>)
 80006b4:	fb82 1203 	smull	r1, r2, r2, r3
 80006b8:	1152      	asrs	r2, r2, #5
 80006ba:	17db      	asrs	r3, r3, #31
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <custom_system_init+0x90>)
 80006c0:	6013      	str	r3, [r2, #0]
	  display_val2 = time_red/100;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	; (8000738 <custom_system_init+0x94>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <custom_system_init+0x8c>)
 80006c8:	fb82 1203 	smull	r1, r2, r2, r3
 80006cc:	1152      	asrs	r2, r2, #5
 80006ce:	17db      	asrs	r3, r3, #31
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	4a1a      	ldr	r2, [pc, #104]	; (800073c <custom_system_init+0x98>)
 80006d4:	6013      	str	r3, [r2, #0]
	  timer_flag[0] = 1; // LED SCAN
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <custom_system_init+0x9c>)
 80006d8:	2201      	movs	r2, #1
 80006da:	601a      	str	r2, [r3, #0]
	  timer_flag[1] = 1; //TRAFFIC TIME
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <custom_system_init+0x9c>)
 80006de:	2201      	movs	r2, #1
 80006e0:	605a      	str	r2, [r3, #4]
	  timer_flag[2] = 0;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <custom_system_init+0x9c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
	  timer_flag[3] = 1;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <custom_system_init+0x9c>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	60da      	str	r2, [r3, #12]
	  setTimer(100,2); // 1 Second General
 80006ee:	2102      	movs	r1, #2
 80006f0:	2064      	movs	r0, #100	; 0x64
 80006f2:	f7ff fe9b 	bl	800042c <setTimer>
	  setTimer(25,3);
 80006f6:	2103      	movs	r1, #3
 80006f8:	2019      	movs	r0, #25
 80006fa:	f7ff fe97 	bl	800042c <setTimer>
	  led_scan_counter = 0;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <custom_system_init+0xa0>)
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
	  HAL_TIM_Base_Start_IT (& htim2 );
 8000704:	4810      	ldr	r0, [pc, #64]	; (8000748 <custom_system_init+0xa4>)
 8000706:	f001 fcab 	bl	8002060 <HAL_TIM_Base_Start_IT>
	  current_fsm_state = 0;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <custom_system_init+0xa8>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
	  init_button(0);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fd1b 	bl	800014c <init_button>
	  init_button(1);
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff fd18 	bl	800014c <init_button>
	  init_button(2);
 800071c:	2002      	movs	r0, #2
 800071e:	f7ff fd15 	bl	800014c <init_button>

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000044 	.word	0x20000044
 800072c:	20000008 	.word	0x20000008
 8000730:	51eb851f 	.word	0x51eb851f
 8000734:	200000bc 	.word	0x200000bc
 8000738:	20000000 	.word	0x20000000
 800073c:	200000c0 	.word	0x200000c0
 8000740:	2000009c 	.word	0x2000009c
 8000744:	20000040 	.word	0x20000040
 8000748:	200000c4 	.word	0x200000c4
 800074c:	2000003c 	.word	0x2000003c

08000750 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
	timerRun(0); //LED SCAN
 8000758:	2000      	movs	r0, #0
 800075a:	f7ff fe83 	bl	8000464 <timerRun>
	timerRun(1); //Traffic Time
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fe80 	bl	8000464 <timerRun>
	timerRun(2);  // 1 second general
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff fe7d 	bl	8000464 <timerRun>
	timerRun(3); //2HZ Blinky
 800076a:	2003      	movs	r0, #3
 800076c:	f7ff fe7a 	bl	8000464 <timerRun>
	getKeyInput(0);
 8000770:	2000      	movs	r0, #0
 8000772:	f7ff fd5f 	bl	8000234 <getKeyInput>
	getKeyInput(1);
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fd5c 	bl	8000234 <getKeyInput>
	getKeyInput(2);
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fd59 	bl	8000234 <getKeyInput>

}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
	...

0800078c <clear_led>:
void clear_led()
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin|yellow1_Pin|red1_Pin|red2_Pin, SET);
 8000790:	2201      	movs	r2, #1
 8000792:	21f0      	movs	r1, #240	; 0xf0
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <clear_led+0x1c>)
 8000796:	f000 fffa 	bl	800178e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(green2_GPIO_Port,green2_Pin|yellow2_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2103      	movs	r1, #3
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <clear_led+0x20>)
 80007a0:	f000 fff5 	bl	800178e <HAL_GPIO_WritePin>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40010c00 	.word	0x40010c00

080007b0 <key_press_check>:
void key_press_check()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	  if(keyPressFlag[0])
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <key_press_check+0x4c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d011      	beq.n	80007e0 <key_press_check+0x30>
	  {
		  clear_led();
 80007bc:	f7ff ffe6 	bl	800078c <clear_led>
		  current_fsm_state +=1;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <key_press_check+0x50>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <key_press_check+0x50>)
 80007c8:	6013      	str	r3, [r2, #0]
		  if(current_fsm_state > 3)current_fsm_state=0;
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <key_press_check+0x50>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	dd02      	ble.n	80007d8 <key_press_check+0x28>
 80007d2:	4b0b      	ldr	r3, [pc, #44]	; (8000800 <key_press_check+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
		  keyPressFlag[0] = 0;
 80007d8:	4b08      	ldr	r3, [pc, #32]	; (80007fc <key_press_check+0x4c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
	  {
		  current_fsm_state = NORMAL_MODE;
		  keyPressFlag[2] = 0;
		  custom_system_init();
	  }
}
 80007de:	e00b      	b.n	80007f8 <key_press_check+0x48>
	  }else if(keyPressFlag[2])
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <key_press_check+0x4c>)
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d007      	beq.n	80007f8 <key_press_check+0x48>
		  current_fsm_state = NORMAL_MODE;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <key_press_check+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
		  keyPressFlag[2] = 0;
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <key_press_check+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
		  custom_system_init();
 80007f4:	f7ff ff56 	bl	80006a4 <custom_system_init>
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000084 	.word	0x20000084
 8000800:	2000003c 	.word	0x2000003c

08000804 <fsm_traffic_master>:
void fsm_traffic_master()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	switch (current_fsm_state) {
 8000808:	4b55      	ldr	r3, [pc, #340]	; (8000960 <fsm_traffic_master+0x15c>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b03      	cmp	r3, #3
 800080e:	f200 809e 	bhi.w	800094e <fsm_traffic_master+0x14a>
 8000812:	a201      	add	r2, pc, #4	; (adr r2, 8000818 <fsm_traffic_master+0x14>)
 8000814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000818:	08000829 	.word	0x08000829
 800081c:	0800083b 	.word	0x0800083b
 8000820:	08000897 	.word	0x08000897
 8000824:	080008f3 	.word	0x080008f3
		case NORMAL_MODE:
		  led_controller();
 8000828:	f000 face 	bl	8000dc8 <led_controller>
		  traffic_state_controller();
 800082c:	f000 f8c4 	bl	80009b8 <traffic_state_controller>
		  timer_2_logic();
 8000830:	f000 f8a6 	bl	8000980 <timer_2_logic>
		  key_press_check();
 8000834:	f7ff ffbc 	bl	80007b0 <key_press_check>
			break;
 8000838:	e090      	b.n	800095c <fsm_traffic_master+0x158>
		case MODE_2:
			key_press_check();
 800083a:	f7ff ffb9 	bl	80007b0 <key_press_check>
			setting_led_controller(current_fsm_state);
 800083e:	4b48      	ldr	r3, [pc, #288]	; (8000960 <fsm_traffic_master+0x15c>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f9ac 	bl	8000ba0 <setting_led_controller>
			if(keyPressFlag[1])
 8000848:	4b46      	ldr	r3, [pc, #280]	; (8000964 <fsm_traffic_master+0x160>)
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d007      	beq.n	8000860 <fsm_traffic_master+0x5c>
			{
				time_red = time_red + 100;
 8000850:	4b45      	ldr	r3, [pc, #276]	; (8000968 <fsm_traffic_master+0x164>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	3364      	adds	r3, #100	; 0x64
 8000856:	4a44      	ldr	r2, [pc, #272]	; (8000968 <fsm_traffic_master+0x164>)
 8000858:	6013      	str	r3, [r2, #0]
				keyPressFlag[1] = 0;
 800085a:	4b42      	ldr	r3, [pc, #264]	; (8000964 <fsm_traffic_master+0x160>)
 800085c:	2200      	movs	r2, #0
 800085e:	605a      	str	r2, [r3, #4]
			}
			if(timer_flag[3])//Blinky led
 8000860:	4b42      	ldr	r3, [pc, #264]	; (800096c <fsm_traffic_master+0x168>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d074      	beq.n	8000952 <fsm_traffic_master+0x14e>
			{
				HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 8000868:	2110      	movs	r1, #16
 800086a:	4841      	ldr	r0, [pc, #260]	; (8000970 <fsm_traffic_master+0x16c>)
 800086c:	f000 ffa7 	bl	80017be <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	483f      	ldr	r0, [pc, #252]	; (8000970 <fsm_traffic_master+0x16c>)
 8000874:	f000 ffa3 	bl	80017be <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin|yellow1_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2160      	movs	r1, #96	; 0x60
 800087c:	483c      	ldr	r0, [pc, #240]	; (8000970 <fsm_traffic_master+0x16c>)
 800087e:	f000 ff86 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin|yellow2_Pin, SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2103      	movs	r1, #3
 8000886:	483b      	ldr	r0, [pc, #236]	; (8000974 <fsm_traffic_master+0x170>)
 8000888:	f000 ff81 	bl	800178e <HAL_GPIO_WritePin>
				setTimer(25,3);
 800088c:	2103      	movs	r1, #3
 800088e:	2019      	movs	r0, #25
 8000890:	f7ff fdcc 	bl	800042c <setTimer>
			}
			break;
 8000894:	e05d      	b.n	8000952 <fsm_traffic_master+0x14e>
		case MODE_3:
			key_press_check();
 8000896:	f7ff ff8b 	bl	80007b0 <key_press_check>
			setting_led_controller(current_fsm_state);
 800089a:	4b31      	ldr	r3, [pc, #196]	; (8000960 <fsm_traffic_master+0x15c>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 f97e 	bl	8000ba0 <setting_led_controller>
			if(keyPressFlag[1])
 80008a4:	4b2f      	ldr	r3, [pc, #188]	; (8000964 <fsm_traffic_master+0x160>)
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d007      	beq.n	80008bc <fsm_traffic_master+0xb8>
			{
				time_yellow = time_yellow + 100;
 80008ac:	4b32      	ldr	r3, [pc, #200]	; (8000978 <fsm_traffic_master+0x174>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3364      	adds	r3, #100	; 0x64
 80008b2:	4a31      	ldr	r2, [pc, #196]	; (8000978 <fsm_traffic_master+0x174>)
 80008b4:	6013      	str	r3, [r2, #0]
				keyPressFlag[1] = 0;
 80008b6:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <fsm_traffic_master+0x160>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
			}
			if(timer_flag[3])
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <fsm_traffic_master+0x168>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d048      	beq.n	8000956 <fsm_traffic_master+0x152>
			{
				HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 80008c4:	2140      	movs	r1, #64	; 0x40
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <fsm_traffic_master+0x16c>)
 80008c8:	f000 ff79 	bl	80017be <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 80008cc:	2102      	movs	r1, #2
 80008ce:	4829      	ldr	r0, [pc, #164]	; (8000974 <fsm_traffic_master+0x170>)
 80008d0:	f000 ff75 	bl	80017be <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin|red1_Pin|red2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	21b0      	movs	r1, #176	; 0xb0
 80008d8:	4825      	ldr	r0, [pc, #148]	; (8000970 <fsm_traffic_master+0x16c>)
 80008da:	f000 ff58 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(green2_GPIO_Port,green2_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2101      	movs	r1, #1
 80008e2:	4824      	ldr	r0, [pc, #144]	; (8000974 <fsm_traffic_master+0x170>)
 80008e4:	f000 ff53 	bl	800178e <HAL_GPIO_WritePin>
				setTimer(25,3);
 80008e8:	2103      	movs	r1, #3
 80008ea:	2019      	movs	r0, #25
 80008ec:	f7ff fd9e 	bl	800042c <setTimer>
			}
			break;
 80008f0:	e031      	b.n	8000956 <fsm_traffic_master+0x152>
		case MODE_4:
			key_press_check();
 80008f2:	f7ff ff5d 	bl	80007b0 <key_press_check>
			setting_led_controller(current_fsm_state);
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <fsm_traffic_master+0x15c>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f950 	bl	8000ba0 <setting_led_controller>
			if(keyPressFlag[1])
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <fsm_traffic_master+0x160>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d007      	beq.n	8000918 <fsm_traffic_master+0x114>
			{
				time_green = time_green + 100;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <fsm_traffic_master+0x178>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	3364      	adds	r3, #100	; 0x64
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <fsm_traffic_master+0x178>)
 8000910:	6013      	str	r3, [r2, #0]
				keyPressFlag[1] = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <fsm_traffic_master+0x160>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
			}
			if(timer_flag[3])
 8000918:	4b14      	ldr	r3, [pc, #80]	; (800096c <fsm_traffic_master+0x168>)
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d01c      	beq.n	800095a <fsm_traffic_master+0x156>
			{
				HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8000920:	2120      	movs	r1, #32
 8000922:	4813      	ldr	r0, [pc, #76]	; (8000970 <fsm_traffic_master+0x16c>)
 8000924:	f000 ff4b 	bl	80017be <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 8000928:	2101      	movs	r1, #1
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <fsm_traffic_master+0x170>)
 800092c:	f000 ff47 	bl	80017be <HAL_GPIO_TogglePin>
				HAL_GPIO_WritePin(red1_GPIO_Port, red2_Pin|red1_Pin|yellow1_Pin, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	21d0      	movs	r1, #208	; 0xd0
 8000934:	480e      	ldr	r0, [pc, #56]	; (8000970 <fsm_traffic_master+0x16c>)
 8000936:	f000 ff2a 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2102      	movs	r1, #2
 800093e:	480d      	ldr	r0, [pc, #52]	; (8000974 <fsm_traffic_master+0x170>)
 8000940:	f000 ff25 	bl	800178e <HAL_GPIO_WritePin>
				setTimer(25,3);
 8000944:	2103      	movs	r1, #3
 8000946:	2019      	movs	r0, #25
 8000948:	f7ff fd70 	bl	800042c <setTimer>
			}
			break;
 800094c:	e005      	b.n	800095a <fsm_traffic_master+0x156>
		default:
			break;
 800094e:	bf00      	nop
 8000950:	e004      	b.n	800095c <fsm_traffic_master+0x158>
			break;
 8000952:	bf00      	nop
 8000954:	e002      	b.n	800095c <fsm_traffic_master+0x158>
			break;
 8000956:	bf00      	nop
 8000958:	e000      	b.n	800095c <fsm_traffic_master+0x158>
			break;
 800095a:	bf00      	nop
	}
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000003c 	.word	0x2000003c
 8000964:	20000084 	.word	0x20000084
 8000968:	20000000 	.word	0x20000000
 800096c:	2000009c 	.word	0x2000009c
 8000970:	40010800 	.word	0x40010800
 8000974:	40010c00 	.word	0x40010c00
 8000978:	20000004 	.word	0x20000004
 800097c:	20000008 	.word	0x20000008

08000980 <timer_2_logic>:
void timer_2_logic()
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
	if(timer_flag[2])
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <timer_2_logic+0x2c>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00d      	beq.n	80009a8 <timer_2_logic+0x28>
	{
		display_val1--;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <timer_2_logic+0x30>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	3b01      	subs	r3, #1
 8000992:	4a07      	ldr	r2, [pc, #28]	; (80009b0 <timer_2_logic+0x30>)
 8000994:	6013      	str	r3, [r2, #0]
		display_val2--;
 8000996:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <timer_2_logic+0x34>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	3b01      	subs	r3, #1
 800099c:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <timer_2_logic+0x34>)
 800099e:	6013      	str	r3, [r2, #0]
		setTimer(100,2);
 80009a0:	2102      	movs	r1, #2
 80009a2:	2064      	movs	r0, #100	; 0x64
 80009a4:	f7ff fd42 	bl	800042c <setTimer>
	}
}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	200000bc 	.word	0x200000bc
 80009b4:	200000c0 	.word	0x200000c0

080009b8 <traffic_state_controller>:
void traffic_state_controller()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	if(timer_flag[1])
 80009bc:	4b6e      	ldr	r3, [pc, #440]	; (8000b78 <traffic_state_controller+0x1c0>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f000 80d5 	beq.w	8000b70 <traffic_state_controller+0x1b8>
		{
			switch (traffic_state)
 80009c6:	4b6d      	ldr	r3, [pc, #436]	; (8000b7c <traffic_state_controller+0x1c4>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	f200 80cc 	bhi.w	8000b68 <traffic_state_controller+0x1b0>
 80009d0:	a201      	add	r2, pc, #4	; (adr r2, 80009d8 <traffic_state_controller+0x20>)
 80009d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d6:	bf00      	nop
 80009d8:	080009e9 	.word	0x080009e9
 80009dc:	08000a4f 	.word	0x08000a4f
 80009e0:	08000aa1 	.word	0x08000aa1
 80009e4:	08000b11 	.word	0x08000b11
			{
				case 0: // green1 red2
					HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin| red2_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	21a0      	movs	r1, #160	; 0xa0
 80009ec:	4864      	ldr	r0, [pc, #400]	; (8000b80 <traffic_state_controller+0x1c8>)
 80009ee:	f000 fece 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin|yellow1_Pin, SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2150      	movs	r1, #80	; 0x50
 80009f6:	4862      	ldr	r0, [pc, #392]	; (8000b80 <traffic_state_controller+0x1c8>)
 80009f8:	f000 fec9 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(green2_GPIO_Port,green2_Pin|yellow2_Pin, SET);
 80009fc:	2201      	movs	r2, #1
 80009fe:	2103      	movs	r1, #3
 8000a00:	4860      	ldr	r0, [pc, #384]	; (8000b84 <traffic_state_controller+0x1cc>)
 8000a02:	f000 fec4 	bl	800178e <HAL_GPIO_WritePin>
					////////////////////////// green1 red2 ON
					display_val1 = time_green/100;
 8000a06:	4b60      	ldr	r3, [pc, #384]	; (8000b88 <traffic_state_controller+0x1d0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a60      	ldr	r2, [pc, #384]	; (8000b8c <traffic_state_controller+0x1d4>)
 8000a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000a10:	1152      	asrs	r2, r2, #5
 8000a12:	17db      	asrs	r3, r3, #31
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	4a5e      	ldr	r2, [pc, #376]	; (8000b90 <traffic_state_controller+0x1d8>)
 8000a18:	6013      	str	r3, [r2, #0]
					display_val2 = time_red/100;
 8000a1a:	4b5e      	ldr	r3, [pc, #376]	; (8000b94 <traffic_state_controller+0x1dc>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a5b      	ldr	r2, [pc, #364]	; (8000b8c <traffic_state_controller+0x1d4>)
 8000a20:	fb82 1203 	smull	r1, r2, r2, r3
 8000a24:	1152      	asrs	r2, r2, #5
 8000a26:	17db      	asrs	r3, r3, #31
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	4a5b      	ldr	r2, [pc, #364]	; (8000b98 <traffic_state_controller+0x1e0>)
 8000a2c:	6013      	str	r3, [r2, #0]
					setTimer(100,2);
 8000a2e:	2102      	movs	r1, #2
 8000a30:	2064      	movs	r0, #100	; 0x64
 8000a32:	f7ff fcfb 	bl	800042c <setTimer>
					setTimer(time_green,1);
 8000a36:	4b54      	ldr	r3, [pc, #336]	; (8000b88 <traffic_state_controller+0x1d0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fcf5 	bl	800042c <setTimer>
					traffic_state++;
 8000a42:	4b4e      	ldr	r3, [pc, #312]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	3301      	adds	r3, #1
 8000a48:	4a4c      	ldr	r2, [pc, #304]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000a4a:	6013      	str	r3, [r2, #0]
					break;
 8000a4c:	e091      	b.n	8000b72 <traffic_state_controller+0x1ba>
				case 1:  // yellow1 red2
					HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin|red2_Pin, RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	21c0      	movs	r1, #192	; 0xc0
 8000a52:	484b      	ldr	r0, [pc, #300]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000a54:	f000 fe9b 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin|green1_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2130      	movs	r1, #48	; 0x30
 8000a5c:	4848      	ldr	r0, [pc, #288]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000a5e:	f000 fe96 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin|yellow2_Pin, SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2103      	movs	r1, #3
 8000a66:	4847      	ldr	r0, [pc, #284]	; (8000b84 <traffic_state_controller+0x1cc>)
 8000a68:	f000 fe91 	bl	800178e <HAL_GPIO_WritePin>
					////////////////////////// yellow1 red2 ON
					display_val1 = time_yellow/100;
 8000a6c:	4b4b      	ldr	r3, [pc, #300]	; (8000b9c <traffic_state_controller+0x1e4>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a46      	ldr	r2, [pc, #280]	; (8000b8c <traffic_state_controller+0x1d4>)
 8000a72:	fb82 1203 	smull	r1, r2, r2, r3
 8000a76:	1152      	asrs	r2, r2, #5
 8000a78:	17db      	asrs	r3, r3, #31
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	4a44      	ldr	r2, [pc, #272]	; (8000b90 <traffic_state_controller+0x1d8>)
 8000a7e:	6013      	str	r3, [r2, #0]
					setTimer(100,2);
 8000a80:	2102      	movs	r1, #2
 8000a82:	2064      	movs	r0, #100	; 0x64
 8000a84:	f7ff fcd2 	bl	800042c <setTimer>
					setTimer(time_yellow,1);
 8000a88:	4b44      	ldr	r3, [pc, #272]	; (8000b9c <traffic_state_controller+0x1e4>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff fccc 	bl	800042c <setTimer>
					traffic_state++;
 8000a94:	4b39      	ldr	r3, [pc, #228]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	4a38      	ldr	r2, [pc, #224]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000a9c:	6013      	str	r3, [r2, #0]
					break;
 8000a9e:	e068      	b.n	8000b72 <traffic_state_controller+0x1ba>
				case 2:  //red1 green2
					HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, RESET);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2110      	movs	r1, #16
 8000aa4:	4836      	ldr	r0, [pc, #216]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000aa6:	f000 fe72 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2101      	movs	r1, #1
 8000aae:	4835      	ldr	r0, [pc, #212]	; (8000b84 <traffic_state_controller+0x1cc>)
 8000ab0:	f000 fe6d 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin|yellow1_Pin, SET);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2160      	movs	r1, #96	; 0x60
 8000ab8:	4831      	ldr	r0, [pc, #196]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000aba:	f000 fe68 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin|yellow2_Pin, SET);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2182      	movs	r1, #130	; 0x82
 8000ac2:	482f      	ldr	r0, [pc, #188]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000ac4:	f000 fe63 	bl	800178e <HAL_GPIO_WritePin>
					////////////////////////// red1 green2 ON
					display_val1 = time_red/100;
 8000ac8:	4b32      	ldr	r3, [pc, #200]	; (8000b94 <traffic_state_controller+0x1dc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a2f      	ldr	r2, [pc, #188]	; (8000b8c <traffic_state_controller+0x1d4>)
 8000ace:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad2:	1152      	asrs	r2, r2, #5
 8000ad4:	17db      	asrs	r3, r3, #31
 8000ad6:	1ad3      	subs	r3, r2, r3
 8000ad8:	4a2d      	ldr	r2, [pc, #180]	; (8000b90 <traffic_state_controller+0x1d8>)
 8000ada:	6013      	str	r3, [r2, #0]
					display_val2 = time_green/100;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <traffic_state_controller+0x1d0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2a      	ldr	r2, [pc, #168]	; (8000b8c <traffic_state_controller+0x1d4>)
 8000ae2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae6:	1152      	asrs	r2, r2, #5
 8000ae8:	17db      	asrs	r3, r3, #31
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <traffic_state_controller+0x1e0>)
 8000aee:	6013      	str	r3, [r2, #0]
					setTimer(time_green,1);
 8000af0:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <traffic_state_controller+0x1d0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fc98 	bl	800042c <setTimer>
					setTimer(100,2);
 8000afc:	2102      	movs	r1, #2
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f7ff fc94 	bl	800042c <setTimer>
					traffic_state++;
 8000b04:	4b1d      	ldr	r3, [pc, #116]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000b0c:	6013      	str	r3, [r2, #0]
					break;
 8000b0e:	e030      	b.n	8000b72 <traffic_state_controller+0x1ba>
				case 3: //red1 yellow2
					HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	481a      	ldr	r0, [pc, #104]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000b16:	f000 fe3a 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4819      	ldr	r0, [pc, #100]	; (8000b84 <traffic_state_controller+0x1cc>)
 8000b20:	f000 fe35 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin|yellow1_Pin|red2_Pin, SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	21e0      	movs	r1, #224	; 0xe0
 8000b28:	4815      	ldr	r0, [pc, #84]	; (8000b80 <traffic_state_controller+0x1c8>)
 8000b2a:	f000 fe30 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, SET);
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2101      	movs	r1, #1
 8000b32:	4814      	ldr	r0, [pc, #80]	; (8000b84 <traffic_state_controller+0x1cc>)
 8000b34:	f000 fe2b 	bl	800178e <HAL_GPIO_WritePin>
					////////////////////////// red1 yellow2 ON
					setTimer(100,2);
 8000b38:	2102      	movs	r1, #2
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f7ff fc76 	bl	800042c <setTimer>
					setTimer(time_yellow,1);
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <traffic_state_controller+0x1e4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	2101      	movs	r1, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff fc70 	bl	800042c <setTimer>
					display_val2 = time_yellow/100;
 8000b4c:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <traffic_state_controller+0x1e4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <traffic_state_controller+0x1d4>)
 8000b52:	fb82 1203 	smull	r1, r2, r2, r3
 8000b56:	1152      	asrs	r2, r2, #5
 8000b58:	17db      	asrs	r3, r3, #31
 8000b5a:	1ad3      	subs	r3, r2, r3
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <traffic_state_controller+0x1e0>)
 8000b5e:	6013      	str	r3, [r2, #0]
					traffic_state=0;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
					break;
 8000b66:	e004      	b.n	8000b72 <traffic_state_controller+0x1ba>
				default:
					traffic_state=0;
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <traffic_state_controller+0x1c4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
					break;
 8000b6e:	e000      	b.n	8000b72 <traffic_state_controller+0x1ba>
			}
		}
 8000b70:	bf00      	nop
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000009c 	.word	0x2000009c
 8000b7c:	20000044 	.word	0x20000044
 8000b80:	40010800 	.word	0x40010800
 8000b84:	40010c00 	.word	0x40010c00
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	51eb851f 	.word	0x51eb851f
 8000b90:	200000bc 	.word	0x200000bc
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200000c0 	.word	0x200000c0
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <setting_led_controller>:
void setting_led_controller(int mode)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	if(timer_flag[0])
 8000ba8:	4b7e      	ldr	r3, [pc, #504]	; (8000da4 <setting_led_controller+0x204>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80f5 	beq.w	8000d9c <setting_led_controller+0x1fc>
		{
			switch (led_scan_counter)
 8000bb2:	4b7d      	ldr	r3, [pc, #500]	; (8000da8 <setting_led_controller+0x208>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	2b03      	cmp	r3, #3
 8000bb8:	f200 80e8 	bhi.w	8000d8c <setting_led_controller+0x1ec>
 8000bbc:	a201      	add	r2, pc, #4	; (adr r2, 8000bc4 <setting_led_controller+0x24>)
 8000bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc2:	bf00      	nop
 8000bc4:	08000bd5 	.word	0x08000bd5
 8000bc8:	08000c09 	.word	0x08000c09
 8000bcc:	08000c47 	.word	0x08000c47
 8000bd0:	08000ccb 	.word	0x08000ccb
			{
				case 0:
					HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2104      	movs	r1, #4
 8000bd8:	4874      	ldr	r0, [pc, #464]	; (8000dac <setting_led_controller+0x20c>)
 8000bda:	f000 fdd8 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin|en3_Pin|en4_Pin, SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	21e0      	movs	r1, #224	; 0xe0
 8000be2:	4872      	ldr	r0, [pc, #456]	; (8000dac <setting_led_controller+0x20c>)
 8000be4:	f000 fdd3 	bl	800178e <HAL_GPIO_WritePin>
					display7Seg(mode/10);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a71      	ldr	r2, [pc, #452]	; (8000db0 <setting_led_controller+0x210>)
 8000bec:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf0:	1092      	asrs	r2, r2, #2
 8000bf2:	17db      	asrs	r3, r3, #31
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f986 	bl	8000f08 <display7Seg>
					led_scan_counter++;
 8000bfc:	4b6a      	ldr	r3, [pc, #424]	; (8000da8 <setting_led_controller+0x208>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a69      	ldr	r2, [pc, #420]	; (8000da8 <setting_led_controller+0x208>)
 8000c04:	6013      	str	r3, [r2, #0]
					break;
 8000c06:	e0c5      	b.n	8000d94 <setting_led_controller+0x1f4>
				case 1:
					HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2180      	movs	r1, #128	; 0x80
 8000c0c:	4867      	ldr	r0, [pc, #412]	; (8000dac <setting_led_controller+0x20c>)
 8000c0e:	f000 fdbe 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin|en3_Pin|en4_Pin, SET);
 8000c12:	2201      	movs	r2, #1
 8000c14:	2164      	movs	r1, #100	; 0x64
 8000c16:	4865      	ldr	r0, [pc, #404]	; (8000dac <setting_led_controller+0x20c>)
 8000c18:	f000 fdb9 	bl	800178e <HAL_GPIO_WritePin>
					display7Seg(mode%10);
 8000c1c:	687a      	ldr	r2, [r7, #4]
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <setting_led_controller+0x210>)
 8000c20:	fb83 1302 	smull	r1, r3, r3, r2
 8000c24:	1099      	asrs	r1, r3, #2
 8000c26:	17d3      	asrs	r3, r2, #31
 8000c28:	1ac9      	subs	r1, r1, r3
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	1ad1      	subs	r1, r2, r3
 8000c34:	4608      	mov	r0, r1
 8000c36:	f000 f967 	bl	8000f08 <display7Seg>
					led_scan_counter++;
 8000c3a:	4b5b      	ldr	r3, [pc, #364]	; (8000da8 <setting_led_controller+0x208>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	4a59      	ldr	r2, [pc, #356]	; (8000da8 <setting_led_controller+0x208>)
 8000c42:	6013      	str	r3, [r2, #0]
					break;
 8000c44:	e0a6      	b.n	8000d94 <setting_led_controller+0x1f4>
				case 2:
					HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	4858      	ldr	r0, [pc, #352]	; (8000dac <setting_led_controller+0x20c>)
 8000c4c:	f000 fd9f 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin|en1_Pin|en4_Pin, SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	21a4      	movs	r1, #164	; 0xa4
 8000c54:	4855      	ldr	r0, [pc, #340]	; (8000dac <setting_led_controller+0x20c>)
 8000c56:	f000 fd9a 	bl	800178e <HAL_GPIO_WritePin>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d021      	beq.n	8000ca4 <setting_led_controller+0x104>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	dc2a      	bgt.n	8000cbc <setting_led_controller+0x11c>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d003      	beq.n	8000c74 <setting_led_controller+0xd4>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d00c      	beq.n	8000c8c <setting_led_controller+0xec>
							break;
						case 3:
							display7Seg(time_green / 1000);
							break;
						default:
							break;
 8000c72:	e023      	b.n	8000cbc <setting_led_controller+0x11c>
							display7Seg(time_red / 1000);
 8000c74:	4b4f      	ldr	r3, [pc, #316]	; (8000db4 <setting_led_controller+0x214>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a4f      	ldr	r2, [pc, #316]	; (8000db8 <setting_led_controller+0x218>)
 8000c7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7e:	1192      	asrs	r2, r2, #6
 8000c80:	17db      	asrs	r3, r3, #31
 8000c82:	1ad3      	subs	r3, r2, r3
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 f93f 	bl	8000f08 <display7Seg>
							break;
 8000c8a:	e018      	b.n	8000cbe <setting_led_controller+0x11e>
							display7Seg(time_yellow / 1000);
 8000c8c:	4b4b      	ldr	r3, [pc, #300]	; (8000dbc <setting_led_controller+0x21c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a49      	ldr	r2, [pc, #292]	; (8000db8 <setting_led_controller+0x218>)
 8000c92:	fb82 1203 	smull	r1, r2, r2, r3
 8000c96:	1192      	asrs	r2, r2, #6
 8000c98:	17db      	asrs	r3, r3, #31
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f000 f933 	bl	8000f08 <display7Seg>
							break;
 8000ca2:	e00c      	b.n	8000cbe <setting_led_controller+0x11e>
							display7Seg(time_green / 1000);
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <setting_led_controller+0x220>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <setting_led_controller+0x218>)
 8000caa:	fb82 1203 	smull	r1, r2, r2, r3
 8000cae:	1192      	asrs	r2, r2, #6
 8000cb0:	17db      	asrs	r3, r3, #31
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 f927 	bl	8000f08 <display7Seg>
							break;
 8000cba:	e000      	b.n	8000cbe <setting_led_controller+0x11e>
							break;
 8000cbc:	bf00      	nop
					}
					led_scan_counter++;
 8000cbe:	4b3a      	ldr	r3, [pc, #232]	; (8000da8 <setting_led_controller+0x208>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	4a38      	ldr	r2, [pc, #224]	; (8000da8 <setting_led_controller+0x208>)
 8000cc6:	6013      	str	r3, [r2, #0]
					break;
 8000cc8:	e064      	b.n	8000d94 <setting_led_controller+0x1f4>
				case 3:
					HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	4837      	ldr	r0, [pc, #220]	; (8000dac <setting_led_controller+0x20c>)
 8000cd0:	f000 fd5d 	bl	800178e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin|en3_Pin|en1_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	21c4      	movs	r1, #196	; 0xc4
 8000cd8:	4834      	ldr	r0, [pc, #208]	; (8000dac <setting_led_controller+0x20c>)
 8000cda:	f000 fd58 	bl	800178e <HAL_GPIO_WritePin>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b03      	cmp	r3, #3
 8000ce2:	d037      	beq.n	8000d54 <setting_led_controller+0x1b4>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b03      	cmp	r3, #3
 8000ce8:	dc4b      	bgt.n	8000d82 <setting_led_controller+0x1e2>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d003      	beq.n	8000cf8 <setting_led_controller+0x158>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d017      	beq.n	8000d26 <setting_led_controller+0x186>
							break;
						case 3:
							display7Seg(time_green / 100 %10);
							break;
						default:
							break;
 8000cf6:	e044      	b.n	8000d82 <setting_led_controller+0x1e2>
							display7Seg(time_red / 100 %10);
 8000cf8:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <setting_led_controller+0x214>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <setting_led_controller+0x224>)
 8000cfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000d02:	1152      	asrs	r2, r2, #5
 8000d04:	17db      	asrs	r3, r3, #31
 8000d06:	1ad2      	subs	r2, r2, r3
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <setting_led_controller+0x210>)
 8000d0a:	fb83 1302 	smull	r1, r3, r3, r2
 8000d0e:	1099      	asrs	r1, r3, #2
 8000d10:	17d3      	asrs	r3, r2, #31
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	460b      	mov	r3, r1
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	440b      	add	r3, r1
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	1ad1      	subs	r1, r2, r3
 8000d1e:	4608      	mov	r0, r1
 8000d20:	f000 f8f2 	bl	8000f08 <display7Seg>
							break;
 8000d24:	e02e      	b.n	8000d84 <setting_led_controller+0x1e4>
							display7Seg(time_yellow / 100 %10);
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <setting_led_controller+0x21c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a26      	ldr	r2, [pc, #152]	; (8000dc4 <setting_led_controller+0x224>)
 8000d2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d30:	1152      	asrs	r2, r2, #5
 8000d32:	17db      	asrs	r3, r3, #31
 8000d34:	1ad2      	subs	r2, r2, r3
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <setting_led_controller+0x210>)
 8000d38:	fb83 1302 	smull	r1, r3, r3, r2
 8000d3c:	1099      	asrs	r1, r3, #2
 8000d3e:	17d3      	asrs	r3, r2, #31
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	460b      	mov	r3, r1
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	440b      	add	r3, r1
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	1ad1      	subs	r1, r2, r3
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	f000 f8db 	bl	8000f08 <display7Seg>
							break;
 8000d52:	e017      	b.n	8000d84 <setting_led_controller+0x1e4>
							display7Seg(time_green / 100 %10);
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <setting_led_controller+0x220>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <setting_led_controller+0x224>)
 8000d5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d5e:	1152      	asrs	r2, r2, #5
 8000d60:	17db      	asrs	r3, r3, #31
 8000d62:	1ad2      	subs	r2, r2, r3
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <setting_led_controller+0x210>)
 8000d66:	fb83 1302 	smull	r1, r3, r3, r2
 8000d6a:	1099      	asrs	r1, r3, #2
 8000d6c:	17d3      	asrs	r3, r2, #31
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	460b      	mov	r3, r1
 8000d72:	009b      	lsls	r3, r3, #2
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad1      	subs	r1, r2, r3
 8000d7a:	4608      	mov	r0, r1
 8000d7c:	f000 f8c4 	bl	8000f08 <display7Seg>
							break;
 8000d80:	e000      	b.n	8000d84 <setting_led_controller+0x1e4>
							break;
 8000d82:	bf00      	nop
					}
					led_scan_counter=0;
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <setting_led_controller+0x208>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
					break;
 8000d8a:	e003      	b.n	8000d94 <setting_led_controller+0x1f4>
				default:
					led_scan_counter=0;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <setting_led_controller+0x208>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
					break;
 8000d92:	bf00      	nop
			}
			setTimer(25,0);
 8000d94:	2100      	movs	r1, #0
 8000d96:	2019      	movs	r0, #25
 8000d98:	f7ff fb48 	bl	800042c <setTimer>
		}
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	2000009c 	.word	0x2000009c
 8000da8:	20000040 	.word	0x20000040
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	66666667 	.word	0x66666667
 8000db4:	20000000 	.word	0x20000000
 8000db8:	10624dd3 	.word	0x10624dd3
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	51eb851f 	.word	0x51eb851f

08000dc8 <led_controller>:
void led_controller()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	if(timer_flag[0])
 8000dcc:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <led_controller+0x128>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 808b 	beq.w	8000eec <led_controller+0x124>
	{
		switch (led_scan_counter)
 8000dd6:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <led_controller+0x12c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d87e      	bhi.n	8000edc <led_controller+0x114>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <led_controller+0x1c>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000e2b 	.word	0x08000e2b
 8000dec:	08000e6b 	.word	0x08000e6b
 8000df0:	08000ea1 	.word	0x08000ea1
		{
			case 0:
				HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2104      	movs	r1, #4
 8000df8:	483f      	ldr	r0, [pc, #252]	; (8000ef8 <led_controller+0x130>)
 8000dfa:	f000 fcc8 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin|en3_Pin|en4_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	21e0      	movs	r1, #224	; 0xe0
 8000e02:	483d      	ldr	r0, [pc, #244]	; (8000ef8 <led_controller+0x130>)
 8000e04:	f000 fcc3 	bl	800178e <HAL_GPIO_WritePin>
				display7Seg(display_val1/10);
 8000e08:	4b3c      	ldr	r3, [pc, #240]	; (8000efc <led_controller+0x134>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	; (8000f00 <led_controller+0x138>)
 8000e0e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e12:	1092      	asrs	r2, r2, #2
 8000e14:	17db      	asrs	r3, r3, #31
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f875 	bl	8000f08 <display7Seg>
				led_scan_counter++;
 8000e1e:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <led_controller+0x12c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <led_controller+0x12c>)
 8000e26:	6013      	str	r3, [r2, #0]
				break;
 8000e28:	e05c      	b.n	8000ee4 <led_controller+0x11c>
			case 1:
				HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2180      	movs	r1, #128	; 0x80
 8000e2e:	4832      	ldr	r0, [pc, #200]	; (8000ef8 <led_controller+0x130>)
 8000e30:	f000 fcad 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin|en3_Pin|en4_Pin, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2164      	movs	r1, #100	; 0x64
 8000e38:	482f      	ldr	r0, [pc, #188]	; (8000ef8 <led_controller+0x130>)
 8000e3a:	f000 fca8 	bl	800178e <HAL_GPIO_WritePin>
				display7Seg(display_val1%10);
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <led_controller+0x134>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <led_controller+0x138>)
 8000e44:	fb83 1302 	smull	r1, r3, r3, r2
 8000e48:	1099      	asrs	r1, r3, #2
 8000e4a:	17d3      	asrs	r3, r2, #31
 8000e4c:	1ac9      	subs	r1, r1, r3
 8000e4e:	460b      	mov	r3, r1
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	440b      	add	r3, r1
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	1ad1      	subs	r1, r2, r3
 8000e58:	4608      	mov	r0, r1
 8000e5a:	f000 f855 	bl	8000f08 <display7Seg>
				led_scan_counter++;
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <led_controller+0x12c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <led_controller+0x12c>)
 8000e66:	6013      	str	r3, [r2, #0]
				break;
 8000e68:	e03c      	b.n	8000ee4 <led_controller+0x11c>
			case 2:
				HAL_GPIO_WritePin(en3_GPIO_Port, en3_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2140      	movs	r1, #64	; 0x40
 8000e6e:	4822      	ldr	r0, [pc, #136]	; (8000ef8 <led_controller+0x130>)
 8000e70:	f000 fc8d 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin|en1_Pin|en4_Pin, SET);
 8000e74:	2201      	movs	r2, #1
 8000e76:	21a4      	movs	r1, #164	; 0xa4
 8000e78:	481f      	ldr	r0, [pc, #124]	; (8000ef8 <led_controller+0x130>)
 8000e7a:	f000 fc88 	bl	800178e <HAL_GPIO_WritePin>
				display7Seg(display_val2/10);
 8000e7e:	4b21      	ldr	r3, [pc, #132]	; (8000f04 <led_controller+0x13c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a1f      	ldr	r2, [pc, #124]	; (8000f00 <led_controller+0x138>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f83a 	bl	8000f08 <display7Seg>
				led_scan_counter++;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <led_controller+0x12c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <led_controller+0x12c>)
 8000e9c:	6013      	str	r3, [r2, #0]
				break;
 8000e9e:	e021      	b.n	8000ee4 <led_controller+0x11c>
			case 3:
				HAL_GPIO_WritePin(en4_GPIO_Port, en4_Pin, RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2120      	movs	r1, #32
 8000ea4:	4814      	ldr	r0, [pc, #80]	; (8000ef8 <led_controller+0x130>)
 8000ea6:	f000 fc72 	bl	800178e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin|en3_Pin|en1_Pin, SET);
 8000eaa:	2201      	movs	r2, #1
 8000eac:	21c4      	movs	r1, #196	; 0xc4
 8000eae:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <led_controller+0x130>)
 8000eb0:	f000 fc6d 	bl	800178e <HAL_GPIO_WritePin>
				display7Seg(display_val2%10);
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <led_controller+0x13c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <led_controller+0x138>)
 8000eba:	fb83 1302 	smull	r1, r3, r3, r2
 8000ebe:	1099      	asrs	r1, r3, #2
 8000ec0:	17d3      	asrs	r3, r2, #31
 8000ec2:	1ac9      	subs	r1, r1, r3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1ad1      	subs	r1, r2, r3
 8000ece:	4608      	mov	r0, r1
 8000ed0:	f000 f81a 	bl	8000f08 <display7Seg>
				led_scan_counter=0;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	; (8000ef4 <led_controller+0x12c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
				break;
 8000eda:	e003      	b.n	8000ee4 <led_controller+0x11c>
			default:
				led_scan_counter=0;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <led_controller+0x12c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
				break;
 8000ee2:	bf00      	nop
		}
		setTimer(25,0);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2019      	movs	r0, #25
 8000ee8:	f7ff faa0 	bl	800042c <setTimer>
	}
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000009c 	.word	0x2000009c
 8000ef4:	20000040 	.word	0x20000040
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	200000bc 	.word	0x200000bc
 8000f00:	66666667 	.word	0x66666667
 8000f04:	200000c0 	.word	0x200000c0

08000f08 <display7Seg>:
void display7Seg(int decimalVal)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	if(decimalVal > 9) decimalVal = 0;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b09      	cmp	r3, #9
 8000f14:	dd01      	ble.n	8000f1a <display7Seg+0x12>
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, (decimalVal==1||decimalVal==4) ? SET:RESET);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d002      	beq.n	8000f26 <display7Seg+0x1e>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	d101      	bne.n	8000f2a <display7Seg+0x22>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <display7Seg+0x24>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f34:	483d      	ldr	r0, [pc, #244]	; (800102c <display7Seg+0x124>)
 8000f36:	f000 fc2a 	bl	800178e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, (decimalVal==5||decimalVal==6) ? SET:RESET);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	d002      	beq.n	8000f46 <display7Seg+0x3e>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d101      	bne.n	8000f4a <display7Seg+0x42>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <display7Seg+0x44>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	461a      	mov	r2, r3
 8000f50:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f54:	4836      	ldr	r0, [pc, #216]	; (8001030 <display7Seg+0x128>)
 8000f56:	f000 fc1a 	bl	800178e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, (decimalVal==2) ? SET:RESET);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	bf0c      	ite	eq
 8000f60:	2301      	moveq	r3, #1
 8000f62:	2300      	movne	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f6c:	4830      	ldr	r0, [pc, #192]	; (8001030 <display7Seg+0x128>)
 8000f6e:	f000 fc0e 	bl	800178e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, (decimalVal==1||decimalVal==4 || decimalVal==7) ? SET:RESET);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <display7Seg+0x7c>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	d002      	beq.n	8000f84 <display7Seg+0x7c>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b07      	cmp	r3, #7
 8000f82:	d101      	bne.n	8000f88 <display7Seg+0x80>
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <display7Seg+0x82>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4827      	ldr	r0, [pc, #156]	; (8001030 <display7Seg+0x128>)
 8000f94:	f000 fbfb 	bl	800178e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, (decimalVal==1||decimalVal==4 || decimalVal==3 || decimalVal==5 || decimalVal==7 || decimalVal==9) ? SET:RESET);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d00e      	beq.n	8000fbc <display7Seg+0xb4>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	d00b      	beq.n	8000fbc <display7Seg+0xb4>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	d008      	beq.n	8000fbc <display7Seg+0xb4>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b05      	cmp	r3, #5
 8000fae:	d005      	beq.n	8000fbc <display7Seg+0xb4>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b07      	cmp	r3, #7
 8000fb4:	d002      	beq.n	8000fbc <display7Seg+0xb4>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b09      	cmp	r3, #9
 8000fba:	d101      	bne.n	8000fc0 <display7Seg+0xb8>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <display7Seg+0xba>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fca:	4819      	ldr	r0, [pc, #100]	; (8001030 <display7Seg+0x128>)
 8000fcc:	f000 fbdf 	bl	800178e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, (decimalVal==1||decimalVal==2||decimalVal==3||decimalVal==7) ? SET:RESET);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d008      	beq.n	8000fe8 <display7Seg+0xe0>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d005      	beq.n	8000fe8 <display7Seg+0xe0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	d002      	beq.n	8000fe8 <display7Seg+0xe0>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	d101      	bne.n	8000fec <display7Seg+0xe4>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <display7Seg+0xe6>
 8000fec:	2300      	movs	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <display7Seg+0x124>)
 8000ff8:	f000 fbc9 	bl	800178e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, (decimalVal==0||decimalVal==1||decimalVal==7) ? SET:RESET);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <display7Seg+0x106>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d002      	beq.n	800100e <display7Seg+0x106>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b07      	cmp	r3, #7
 800100c:	d101      	bne.n	8001012 <display7Seg+0x10a>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <display7Seg+0x10c>
 8001012:	2300      	movs	r3, #0
 8001014:	b2db      	uxtb	r3, r3
 8001016:	461a      	mov	r2, r3
 8001018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800101c:	4803      	ldr	r0, [pc, #12]	; (800102c <display7Seg+0x124>)
 800101e:	f000 fbb6 	bl	800178e <HAL_GPIO_WritePin>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40010c00 	.word	0x40010c00
 8001030:	40010800 	.word	0x40010800

08001034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001038:	b672      	cpsid	i
}
 800103a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800103c:	e7fe      	b.n	800103c <Error_Handler+0x8>
	...

08001040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_MspInit+0x40>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_MspInit+0x40>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6193      	str	r3, [r2, #24]
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_MspInit+0x40>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x40>)
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	4a07      	ldr	r2, [pc, #28]	; (8001080 <HAL_MspInit+0x40>)
 8001064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001068:	61d3      	str	r3, [r2, #28]
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <HAL_MspInit+0x40>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001094:	d113      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_TIM_Base_MspInit+0x44>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <HAL_TIM_Base_MspInit+0x44>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	61d3      	str	r3, [r2, #28]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_TIM_Base_MspInit+0x44>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201c      	movs	r0, #28
 80010b4:	f000 f9a1 	bl	80013fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 f9ba 	bl	8001432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40021000 	.word	0x40021000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr

0800110e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001112:	f000 f87f 	bl	8001214 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001120:	4802      	ldr	r0, [pc, #8]	; (800112c <TIM2_IRQHandler+0x10>)
 8001122:	f000 ffe9 	bl	80020f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000c4 	.word	0x200000c4

08001130 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	; (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	; (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	; (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001162:	f7ff ffe5 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001166:	f001 fb0f 	bl	8002788 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff f9a3 	bl	80004b4 <main>
  bx lr
 800116e:	4770      	bx	lr
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001178:	08002820 	.word	0x08002820
  ldr r2, =_sbss
 800117c:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001180:	20000110 	.word	0x20000110

08001184 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC1_2_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HAL_Init+0x28>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_Init+0x28>)
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f923 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f808 	bl	80011b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011a4:	f7ff ff4c 	bl	8001040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011a8:	2300      	movs	r3, #0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40022000 	.word	0x40022000

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_InitTick+0x54>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <HAL_InitTick+0x58>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f93b 	bl	800144e <HAL_SYSTICK_Config>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e00e      	b.n	8001200 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b0f      	cmp	r3, #15
 80011e6:	d80a      	bhi.n	80011fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e8:	2200      	movs	r2, #0
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	f04f 30ff 	mov.w	r0, #4294967295
 80011f0:	f000 f903 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011f4:	4a06      	ldr	r2, [pc, #24]	; (8001210 <HAL_InitTick+0x5c>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
 80011fc:	e000      	b.n	8001200 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000014 	.word	0x20000014
 800120c:	2000001c 	.word	0x2000001c
 8001210:	20000018 	.word	0x20000018

08001214 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_IncTick+0x1c>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	461a      	mov	r2, r3
 800121e:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_IncTick+0x20>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4413      	add	r3, r2
 8001224:	4a03      	ldr	r2, [pc, #12]	; (8001234 <HAL_IncTick+0x20>)
 8001226:	6013      	str	r3, [r2, #0]
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	bc80      	pop	{r7}
 800122e:	4770      	bx	lr
 8001230:	2000001c 	.word	0x2000001c
 8001234:	2000010c 	.word	0x2000010c

08001238 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return uwTick;
 800123c:	4b02      	ldr	r3, [pc, #8]	; (8001248 <HAL_GetTick+0x10>)
 800123e:	681b      	ldr	r3, [r3, #0]
}
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	2000010c 	.word	0x2000010c

0800124c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001268:	4013      	ands	r3, r2
 800126a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	; (8001290 <__NVIC_SetPriorityGrouping+0x44>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <__NVIC_GetPriorityGrouping+0x18>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	0a1b      	lsrs	r3, r3, #8
 800129e:	f003 0307 	and.w	r3, r3, #7
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db0b      	blt.n	80012da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	f003 021f 	and.w	r2, r3, #31
 80012c8:	4906      	ldr	r1, [pc, #24]	; (80012e4 <__NVIC_EnableIRQ+0x34>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	095b      	lsrs	r3, r3, #5
 80012d0:	2001      	movs	r0, #1
 80012d2:	fa00 f202 	lsl.w	r2, r0, r2
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100

080012e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	db0a      	blt.n	8001312 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	490c      	ldr	r1, [pc, #48]	; (8001334 <__NVIC_SetPriority+0x4c>)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	440b      	add	r3, r1
 800130c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001310:	e00a      	b.n	8001328 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4908      	ldr	r1, [pc, #32]	; (8001338 <__NVIC_SetPriority+0x50>)
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	3b04      	subs	r3, #4
 8001320:	0112      	lsls	r2, r2, #4
 8001322:	b2d2      	uxtb	r2, r2
 8001324:	440b      	add	r3, r1
 8001326:	761a      	strb	r2, [r3, #24]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000e100 	.word	0xe000e100
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800133c:	b480      	push	{r7}
 800133e:	b089      	sub	sp, #36	; 0x24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001350:	69fb      	ldr	r3, [r7, #28]
 8001352:	f1c3 0307 	rsb	r3, r3, #7
 8001356:	2b04      	cmp	r3, #4
 8001358:	bf28      	it	cs
 800135a:	2304      	movcs	r3, #4
 800135c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	3304      	adds	r3, #4
 8001362:	2b06      	cmp	r3, #6
 8001364:	d902      	bls.n	800136c <NVIC_EncodePriority+0x30>
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3b03      	subs	r3, #3
 800136a:	e000      	b.n	800136e <NVIC_EncodePriority+0x32>
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001370:	f04f 32ff 	mov.w	r2, #4294967295
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	43da      	mvns	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	401a      	ands	r2, r3
 8001380:	697b      	ldr	r3, [r7, #20]
 8001382:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001384:	f04f 31ff 	mov.w	r1, #4294967295
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	fa01 f303 	lsl.w	r3, r1, r3
 800138e:	43d9      	mvns	r1, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001394:	4313      	orrs	r3, r2
         );
}
 8001396:	4618      	mov	r0, r3
 8001398:	3724      	adds	r7, #36	; 0x24
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff90 	bl	80012e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff2d 	bl	800124c <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff42 	bl	8001294 <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff90 	bl	800133c <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5f 	bl	80012e8 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff35 	bl	80012b0 <__NVIC_EnableIRQ>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffa2 	bl	80013a0 <SysTick_Config>
 800145c:	4603      	mov	r3, r0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001468:	b480      	push	{r7}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147a:	e161      	b.n	8001740 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800147c:	2201      	movs	r2, #1
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	429a      	cmp	r2, r3
 8001496:	f040 8150 	bne.w	800173a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a97      	ldr	r2, [pc, #604]	; (80016fc <HAL_GPIO_Init+0x294>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d05e      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014a4:	4a95      	ldr	r2, [pc, #596]	; (80016fc <HAL_GPIO_Init+0x294>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d875      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014aa:	4a95      	ldr	r2, [pc, #596]	; (8001700 <HAL_GPIO_Init+0x298>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d058      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014b0:	4a93      	ldr	r2, [pc, #588]	; (8001700 <HAL_GPIO_Init+0x298>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d86f      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014b6:	4a93      	ldr	r2, [pc, #588]	; (8001704 <HAL_GPIO_Init+0x29c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d052      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014bc:	4a91      	ldr	r2, [pc, #580]	; (8001704 <HAL_GPIO_Init+0x29c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d869      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014c2:	4a91      	ldr	r2, [pc, #580]	; (8001708 <HAL_GPIO_Init+0x2a0>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d04c      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014c8:	4a8f      	ldr	r2, [pc, #572]	; (8001708 <HAL_GPIO_Init+0x2a0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d863      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014ce:	4a8f      	ldr	r2, [pc, #572]	; (800170c <HAL_GPIO_Init+0x2a4>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d046      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
 80014d4:	4a8d      	ldr	r2, [pc, #564]	; (800170c <HAL_GPIO_Init+0x2a4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d85d      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014da:	2b12      	cmp	r3, #18
 80014dc:	d82a      	bhi.n	8001534 <HAL_GPIO_Init+0xcc>
 80014de:	2b12      	cmp	r3, #18
 80014e0:	d859      	bhi.n	8001596 <HAL_GPIO_Init+0x12e>
 80014e2:	a201      	add	r2, pc, #4	; (adr r2, 80014e8 <HAL_GPIO_Init+0x80>)
 80014e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e8:	08001563 	.word	0x08001563
 80014ec:	0800153d 	.word	0x0800153d
 80014f0:	0800154f 	.word	0x0800154f
 80014f4:	08001591 	.word	0x08001591
 80014f8:	08001597 	.word	0x08001597
 80014fc:	08001597 	.word	0x08001597
 8001500:	08001597 	.word	0x08001597
 8001504:	08001597 	.word	0x08001597
 8001508:	08001597 	.word	0x08001597
 800150c:	08001597 	.word	0x08001597
 8001510:	08001597 	.word	0x08001597
 8001514:	08001597 	.word	0x08001597
 8001518:	08001597 	.word	0x08001597
 800151c:	08001597 	.word	0x08001597
 8001520:	08001597 	.word	0x08001597
 8001524:	08001597 	.word	0x08001597
 8001528:	08001597 	.word	0x08001597
 800152c:	08001545 	.word	0x08001545
 8001530:	08001559 	.word	0x08001559
 8001534:	4a76      	ldr	r2, [pc, #472]	; (8001710 <HAL_GPIO_Init+0x2a8>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d013      	beq.n	8001562 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800153a:	e02c      	b.n	8001596 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	623b      	str	r3, [r7, #32]
          break;
 8001542:	e029      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	3304      	adds	r3, #4
 800154a:	623b      	str	r3, [r7, #32]
          break;
 800154c:	e024      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3308      	adds	r3, #8
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e01f      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	330c      	adds	r3, #12
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e01a      	b.n	8001598 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d102      	bne.n	8001570 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800156a:	2304      	movs	r3, #4
 800156c:	623b      	str	r3, [r7, #32]
          break;
 800156e:	e013      	b.n	8001598 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d105      	bne.n	8001584 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001578:	2308      	movs	r3, #8
 800157a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	611a      	str	r2, [r3, #16]
          break;
 8001582:	e009      	b.n	8001598 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001584:	2308      	movs	r3, #8
 8001586:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	615a      	str	r2, [r3, #20]
          break;
 800158e:	e003      	b.n	8001598 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
          break;
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x130>
          break;
 8001596:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2bff      	cmp	r3, #255	; 0xff
 800159c:	d801      	bhi.n	80015a2 <HAL_GPIO_Init+0x13a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	e001      	b.n	80015a6 <HAL_GPIO_Init+0x13e>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3304      	adds	r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	; 0xff
 80015ac:	d802      	bhi.n	80015b4 <HAL_GPIO_Init+0x14c>
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	e002      	b.n	80015ba <HAL_GPIO_Init+0x152>
 80015b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b6:	3b08      	subs	r3, #8
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	210f      	movs	r1, #15
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	fa01 f303 	lsl.w	r3, r1, r3
 80015d4:	431a      	orrs	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f000 80a9 	beq.w	800173a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_GPIO_Init+0x2ac>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a49      	ldr	r2, [pc, #292]	; (8001714 <HAL_GPIO_Init+0x2ac>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b47      	ldr	r3, [pc, #284]	; (8001714 <HAL_GPIO_Init+0x2ac>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001600:	4a45      	ldr	r2, [pc, #276]	; (8001718 <HAL_GPIO_Init+0x2b0>)
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	089b      	lsrs	r3, r3, #2
 8001606:	3302      	adds	r3, #2
 8001608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800160c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	220f      	movs	r2, #15
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4013      	ands	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a3d      	ldr	r2, [pc, #244]	; (800171c <HAL_GPIO_Init+0x2b4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1e0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a3c      	ldr	r2, [pc, #240]	; (8001720 <HAL_GPIO_Init+0x2b8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1dc>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a3b      	ldr	r2, [pc, #236]	; (8001724 <HAL_GPIO_Init+0x2bc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1d8>
 800163c:	2302      	movs	r3, #2
 800163e:	e004      	b.n	800164a <HAL_GPIO_Init+0x1e2>
 8001640:	2303      	movs	r3, #3
 8001642:	e002      	b.n	800164a <HAL_GPIO_Init+0x1e2>
 8001644:	2301      	movs	r3, #1
 8001646:	e000      	b.n	800164a <HAL_GPIO_Init+0x1e2>
 8001648:	2300      	movs	r3, #0
 800164a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800164c:	f002 0203 	and.w	r2, r2, #3
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	4093      	lsls	r3, r2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800165a:	492f      	ldr	r1, [pc, #188]	; (8001718 <HAL_GPIO_Init+0x2b0>)
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	3302      	adds	r3, #2
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	492b      	ldr	r1, [pc, #172]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
 8001680:	e006      	b.n	8001690 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	43db      	mvns	r3, r3
 800168a:	4927      	ldr	r1, [pc, #156]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 800168c:	4013      	ands	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d006      	beq.n	80016aa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	4921      	ldr	r1, [pc, #132]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	604b      	str	r3, [r1, #4]
 80016a8:	e006      	b.n	80016b8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016ac:	685a      	ldr	r2, [r3, #4]
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	491d      	ldr	r1, [pc, #116]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d006      	beq.n	80016d2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	4917      	ldr	r1, [pc, #92]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
 80016d0:	e006      	b.n	80016e0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	43db      	mvns	r3, r3
 80016da:	4913      	ldr	r1, [pc, #76]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016dc:	4013      	ands	r3, r2
 80016de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d01f      	beq.n	800172c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	490d      	ldr	r1, [pc, #52]	; (8001728 <HAL_GPIO_Init+0x2c0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e01f      	b.n	800173a <HAL_GPIO_Init+0x2d2>
 80016fa:	bf00      	nop
 80016fc:	10320000 	.word	0x10320000
 8001700:	10310000 	.word	0x10310000
 8001704:	10220000 	.word	0x10220000
 8001708:	10210000 	.word	0x10210000
 800170c:	10120000 	.word	0x10120000
 8001710:	10110000 	.word	0x10110000
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	40010800 	.word	0x40010800
 8001720:	40010c00 	.word	0x40010c00
 8001724:	40011000 	.word	0x40011000
 8001728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800172c:	4b0b      	ldr	r3, [pc, #44]	; (800175c <HAL_GPIO_Init+0x2f4>)
 800172e:	68da      	ldr	r2, [r3, #12]
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	43db      	mvns	r3, r3
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <HAL_GPIO_Init+0x2f4>)
 8001736:	4013      	ands	r3, r2
 8001738:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	3301      	adds	r3, #1
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	fa22 f303 	lsr.w	r3, r2, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	f47f ae96 	bne.w	800147c <HAL_GPIO_Init+0x14>
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	372c      	adds	r7, #44	; 0x2c
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e001      	b.n	8001782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]
 800179a:	4613      	mov	r3, r2
 800179c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800179e:	787b      	ldrb	r3, [r7, #1]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a4:	887a      	ldrh	r2, [r7, #2]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017aa:	e003      	b.n	80017b4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	041a      	lsls	r2, r3, #16
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	611a      	str	r2, [r3, #16]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d0:	887a      	ldrh	r2, [r7, #2]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4013      	ands	r3, r2
 80017d6:	041a      	lsls	r2, r3, #16
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	43d9      	mvns	r1, r3
 80017dc:	887b      	ldrh	r3, [r7, #2]
 80017de:	400b      	ands	r3, r1
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	611a      	str	r2, [r3, #16]
}
 80017e6:	bf00      	nop
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e272      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 8087 	beq.w	800191e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001810:	4b92      	ldr	r3, [pc, #584]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	2b04      	cmp	r3, #4
 800181a:	d00c      	beq.n	8001836 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800181c:	4b8f      	ldr	r3, [pc, #572]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 030c 	and.w	r3, r3, #12
 8001824:	2b08      	cmp	r3, #8
 8001826:	d112      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
 8001828:	4b8c      	ldr	r3, [pc, #560]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	4b89      	ldr	r3, [pc, #548]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d06c      	beq.n	800191c <HAL_RCC_OscConfig+0x12c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d168      	bne.n	800191c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e24c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x76>
 8001858:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7f      	ldr	r2, [pc, #508]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e02e      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10c      	bne.n	8001888 <HAL_RCC_OscConfig+0x98>
 800186e:	4b7b      	ldr	r3, [pc, #492]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b78      	ldr	r3, [pc, #480]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a77      	ldr	r2, [pc, #476]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001880:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	e01d      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001890:	d10c      	bne.n	80018ac <HAL_RCC_OscConfig+0xbc>
 8001892:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a71      	ldr	r2, [pc, #452]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	4b6f      	ldr	r3, [pc, #444]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a6e      	ldr	r2, [pc, #440]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	e00b      	b.n	80018c4 <HAL_RCC_OscConfig+0xd4>
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a6a      	ldr	r2, [pc, #424]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a67      	ldr	r2, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d013      	beq.n	80018f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fcb4 	bl	8001238 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff fcb0 	bl	8001238 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e200      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b5d      	ldr	r3, [pc, #372]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d0f0      	beq.n	80018d4 <HAL_RCC_OscConfig+0xe4>
 80018f2:	e014      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f4:	f7ff fca0 	bl	8001238 <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018fc:	f7ff fc9c 	bl	8001238 <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b64      	cmp	r3, #100	; 0x64
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e1ec      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	4b53      	ldr	r3, [pc, #332]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1f0      	bne.n	80018fc <HAL_RCC_OscConfig+0x10c>
 800191a:	e000      	b.n	800191e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800191c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0302 	and.w	r3, r3, #2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d063      	beq.n	80019f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b4c      	ldr	r3, [pc, #304]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 030c 	and.w	r3, r3, #12
 8001932:	2b00      	cmp	r3, #0
 8001934:	d00b      	beq.n	800194e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001936:	4b49      	ldr	r3, [pc, #292]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 030c 	and.w	r3, r3, #12
 800193e:	2b08      	cmp	r3, #8
 8001940:	d11c      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d116      	bne.n	800197c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194e:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b01      	cmp	r3, #1
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e1c0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001966:	4b3d      	ldr	r3, [pc, #244]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	4939      	ldr	r1, [pc, #228]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197a:	e03a      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d020      	beq.n	80019c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001984:	4b36      	ldr	r3, [pc, #216]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 8001986:	2201      	movs	r2, #1
 8001988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198a:	f7ff fc55 	bl	8001238 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff fc51 	bl	8001238 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e1a1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	4927      	ldr	r1, [pc, #156]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]
 80019c4:	e015      	b.n	80019f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_RCC_OscConfig+0x270>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fc34 	bl	8001238 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d4:	f7ff fc30 	bl	8001238 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e180      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03a      	beq.n	8001a74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d019      	beq.n	8001a3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0c:	f7ff fc14 	bl	8001238 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fc10 	bl	8001238 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e160      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d0f0      	beq.n	8001a14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 faa6 	bl	8001f84 <RCC_Delay>
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7ff fbfa 	bl	8001238 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fbf6 	bl	8001238 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d908      	bls.n	8001a68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e146      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001a5a:	bf00      	nop
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	42420000 	.word	0x42420000
 8001a64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e9      	bne.n	8001a48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a6 	beq.w	8001bce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10d      	bne.n	8001aae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	4a87      	ldr	r2, [pc, #540]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	61d3      	str	r3, [r2, #28]
 8001a9e:	4b85      	ldr	r3, [pc, #532]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aae:	4b82      	ldr	r3, [pc, #520]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d118      	bne.n	8001aec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aba:	4b7f      	ldr	r3, [pc, #508]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a7e      	ldr	r2, [pc, #504]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fbb7 	bl	8001238 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ace:	f7ff fbb3 	bl	8001238 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b64      	cmp	r3, #100	; 0x64
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e103      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	4b75      	ldr	r3, [pc, #468]	; (8001cb8 <HAL_RCC_OscConfig+0x4c8>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0f0      	beq.n	8001ace <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x312>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	e02d      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0x334>
 8001b0a:	4b6a      	ldr	r3, [pc, #424]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b0c:	6a1b      	ldr	r3, [r3, #32]
 8001b0e:	4a69      	ldr	r2, [pc, #420]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	6213      	str	r3, [r2, #32]
 8001b16:	4b67      	ldr	r3, [pc, #412]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b18:	6a1b      	ldr	r3, [r3, #32]
 8001b1a:	4a66      	ldr	r2, [pc, #408]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	6213      	str	r3, [r2, #32]
 8001b22:	e01c      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	2b05      	cmp	r3, #5
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x356>
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	4a60      	ldr	r2, [pc, #384]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6213      	str	r3, [r2, #32]
 8001b38:	4b5e      	ldr	r3, [pc, #376]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	4a5d      	ldr	r2, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	f043 0301 	orr.w	r3, r3, #1
 8001b42:	6213      	str	r3, [r2, #32]
 8001b44:	e00b      	b.n	8001b5e <HAL_RCC_OscConfig+0x36e>
 8001b46:	4b5b      	ldr	r3, [pc, #364]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	4a5a      	ldr	r2, [pc, #360]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	6213      	str	r3, [r2, #32]
 8001b52:	4b58      	ldr	r3, [pc, #352]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b54:	6a1b      	ldr	r3, [r3, #32]
 8001b56:	4a57      	ldr	r2, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	f023 0304 	bic.w	r3, r3, #4
 8001b5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d015      	beq.n	8001b92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b66:	f7ff fb67 	bl	8001238 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6c:	e00a      	b.n	8001b84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fb63 	bl	8001238 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e0b1      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d0ee      	beq.n	8001b6e <HAL_RCC_OscConfig+0x37e>
 8001b90:	e014      	b.n	8001bbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b92:	f7ff fb51 	bl	8001238 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	e00a      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9a:	f7ff fb4d 	bl	8001238 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e09b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bb2:	6a1b      	ldr	r3, [r3, #32]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1ee      	bne.n	8001b9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bbc:	7dfb      	ldrb	r3, [r7, #23]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d105      	bne.n	8001bce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 8087 	beq.w	8001ce6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d061      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d146      	bne.n	8001c7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fb21 	bl	8001238 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfa:	f7ff fb1d 	bl	8001238 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e06d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f0      	bne.n	8001bfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c20:	d108      	bne.n	8001c34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	4921      	ldr	r1, [pc, #132]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a19      	ldr	r1, [r3, #32]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	430b      	orrs	r3, r1
 8001c46:	491b      	ldr	r1, [pc, #108]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c52:	f7ff faf1 	bl	8001238 <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5a:	f7ff faed 	bl	8001238 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e03d      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0f0      	beq.n	8001c5a <HAL_RCC_OscConfig+0x46a>
 8001c78:	e035      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_RCC_OscConfig+0x4cc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fada 	bl	8001238 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fad6 	bl	8001238 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e026      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x498>
 8001ca6:	e01e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d107      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40007000 	.word	0x40007000
 8001cbc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_OscConfig+0x500>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d106      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3718      	adds	r7, #24
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e0d0      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 0207 	bic.w	r2, r3, #7
 8001d1e:	4965      	ldr	r1, [pc, #404]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d040      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d115      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d107      	bne.n	8001dc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d109      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e073      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc2:	4b3d      	ldr	r3, [pc, #244]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e06b      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd2:	4b39      	ldr	r3, [pc, #228]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 0203 	bic.w	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4936      	ldr	r1, [pc, #216]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de4:	f7ff fa28 	bl	8001238 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e00a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff fa24 	bl	8001238 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e053      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 020c 	and.w	r2, r3, #12
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d1eb      	bne.n	8001dec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e14:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d210      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e22:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f023 0207 	bic.w	r2, r3, #7
 8001e2a:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	; (8001ebc <HAL_RCC_ClockConfig+0x1c8>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	; (8001ec0 <HAL_RCC_ClockConfig+0x1cc>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7ff f986 	bl	80011b4 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08002808 	.word	0x08002808
 8001ec0:	20000014 	.word	0x20000014
 8001ec4:	20000018 	.word	0x20000018

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b490      	push	{r4, r7}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ece:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <HAL_RCC_GetSysClockFreq+0xac>)
 8001ed0:	1d3c      	adds	r4, r7, #4
 8001ed2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ed4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ed8:	f240 2301 	movw	r3, #513	; 0x201
 8001edc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef2:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d002      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x40>
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x46>
 8001f06:	e02b      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f0a:	623b      	str	r3, [r7, #32]
      break;
 8001f0c:	e02b      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	0c9b      	lsrs	r3, r3, #18
 8001f12:	f003 030f 	and.w	r3, r3, #15
 8001f16:	3328      	adds	r3, #40	; 0x28
 8001f18:	443b      	add	r3, r7
 8001f1a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f1e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d012      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	3328      	adds	r3, #40	; 0x28
 8001f36:	443b      	add	r3, r7
 8001f38:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001f3c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4a0e      	ldr	r2, [pc, #56]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f42:	fb03 f202 	mul.w	r2, r3, r2
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f4e:	e004      	b.n	8001f5a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	4a0b      	ldr	r2, [pc, #44]	; (8001f80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	623b      	str	r3, [r7, #32]
      break;
 8001f5e:	e002      	b.n	8001f66 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f62:	623b      	str	r3, [r7, #32]
      break;
 8001f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f66:	6a3b      	ldr	r3, [r7, #32]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3728      	adds	r7, #40	; 0x28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc90      	pop	{r4, r7}
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	080027f8 	.word	0x080027f8
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	007a1200 	.word	0x007a1200
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f8c:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <RCC_Delay+0x34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <RCC_Delay+0x38>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a5b      	lsrs	r3, r3, #9
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fa0:	bf00      	nop
  }
  while (Delay --);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1e5a      	subs	r2, r3, #1
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <RCC_Delay+0x1c>
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	20000014 	.word	0x20000014
 8001fbc:	10624dd3 	.word	0x10624dd3

08001fc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e041      	b.n	8002056 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff f84c 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fa6a 	bl	80024d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
	...

08002060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d001      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e035      	b.n	80020e4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a16      	ldr	r2, [pc, #88]	; (80020f0 <HAL_TIM_Base_Start_IT+0x90>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d009      	beq.n	80020ae <HAL_TIM_Base_Start_IT+0x4e>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a2:	d004      	beq.n	80020ae <HAL_TIM_Base_Start_IT+0x4e>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_TIM_Base_Start_IT+0x94>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d111      	bne.n	80020d2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b06      	cmp	r3, #6
 80020be:	d010      	beq.n	80020e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f042 0201 	orr.w	r2, r2, #1
 80020ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d0:	e007      	b.n	80020e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40012c00 	.word	0x40012c00
 80020f4:	40000400 	.word	0x40000400

080020f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0302 	and.w	r3, r3, #2
 8002118:	2b02      	cmp	r3, #2
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0202 	mvn.w	r2, #2
 8002124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f9b1 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f9a4 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9b3 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	2b04      	cmp	r3, #4
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0204 	mvn.w	r2, #4
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f987 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f97a 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f989 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d122      	bne.n	80021fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b08      	cmp	r3, #8
 80021c2:	d11b      	bne.n	80021fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0208 	mvn.w	r2, #8
 80021cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2204      	movs	r2, #4
 80021d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f95d 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 80021e8:	e005      	b.n	80021f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f950 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f95f 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691b      	ldr	r3, [r3, #16]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b10      	cmp	r3, #16
 8002208:	d122      	bne.n	8002250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	f003 0310 	and.w	r3, r3, #16
 8002214:	2b10      	cmp	r3, #16
 8002216:	d11b      	bne.n	8002250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f06f 0210 	mvn.w	r2, #16
 8002220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2208      	movs	r2, #8
 8002226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f933 	bl	80024a2 <HAL_TIM_IC_CaptureCallback>
 800223c:	e005      	b.n	800224a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f926 	bl	8002490 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f935 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b01      	cmp	r3, #1
 800225c:	d10e      	bne.n	800227c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b01      	cmp	r3, #1
 800226a:	d107      	bne.n	800227c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f06f 0201 	mvn.w	r2, #1
 8002274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fa6a 	bl	8000750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	2b80      	cmp	r3, #128	; 0x80
 8002288:	d10e      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d107      	bne.n	80022a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 fa67 	bl	8002776 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d10e      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b40      	cmp	r3, #64	; 0x40
 80022c2:	d107      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f8f9 	bl	80024c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0220 	mvn.w	r2, #32
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fa32 	bl	8002764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_TIM_ConfigClockSource+0x18>
 800231c:	2302      	movs	r3, #2
 800231e:	e0b3      	b.n	8002488 <HAL_TIM_ConfigClockSource+0x180>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800233e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002346:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002358:	d03e      	beq.n	80023d8 <HAL_TIM_ConfigClockSource+0xd0>
 800235a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800235e:	f200 8087 	bhi.w	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002366:	f000 8085 	beq.w	8002474 <HAL_TIM_ConfigClockSource+0x16c>
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	d87f      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002370:	2b70      	cmp	r3, #112	; 0x70
 8002372:	d01a      	beq.n	80023aa <HAL_TIM_ConfigClockSource+0xa2>
 8002374:	2b70      	cmp	r3, #112	; 0x70
 8002376:	d87b      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002378:	2b60      	cmp	r3, #96	; 0x60
 800237a:	d050      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x116>
 800237c:	2b60      	cmp	r3, #96	; 0x60
 800237e:	d877      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002380:	2b50      	cmp	r3, #80	; 0x50
 8002382:	d03c      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0xf6>
 8002384:	2b50      	cmp	r3, #80	; 0x50
 8002386:	d873      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002388:	2b40      	cmp	r3, #64	; 0x40
 800238a:	d058      	beq.n	800243e <HAL_TIM_ConfigClockSource+0x136>
 800238c:	2b40      	cmp	r3, #64	; 0x40
 800238e:	d86f      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002390:	2b30      	cmp	r3, #48	; 0x30
 8002392:	d064      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x156>
 8002394:	2b30      	cmp	r3, #48	; 0x30
 8002396:	d86b      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 8002398:	2b20      	cmp	r3, #32
 800239a:	d060      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x156>
 800239c:	2b20      	cmp	r3, #32
 800239e:	d867      	bhi.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d05c      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x156>
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d05a      	beq.n	800245e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80023a8:	e062      	b.n	8002470 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6899      	ldr	r1, [r3, #8]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f000 f95c 	bl	8002676 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	609a      	str	r2, [r3, #8]
      break;
 80023d6:	e04e      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	f000 f945 	bl	8002676 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023fa:	609a      	str	r2, [r3, #8]
      break;
 80023fc:	e03b      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	461a      	mov	r2, r3
 800240c:	f000 f8bc 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2150      	movs	r1, #80	; 0x50
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f913 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 800241c:	e02b      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6859      	ldr	r1, [r3, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	461a      	mov	r2, r3
 800242c:	f000 f8da 	bl	80025e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2160      	movs	r1, #96	; 0x60
 8002436:	4618      	mov	r0, r3
 8002438:	f000 f903 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 800243c:	e01b      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	f000 f89c 	bl	8002588 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f8f3 	bl	8002642 <TIM_ITRx_SetConfig>
      break;
 800245c:	e00b      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4619      	mov	r1, r3
 8002468:	4610      	mov	r0, r2
 800246a:	f000 f8ea 	bl	8002642 <TIM_ITRx_SetConfig>
        break;
 800246e:	e002      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002470:	bf00      	nop
 8002472:	e000      	b.n	8002476 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002474:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <TIM_Base_SetConfig+0xa8>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d007      	beq.n	8002500 <TIM_Base_SetConfig+0x28>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d003      	beq.n	8002500 <TIM_Base_SetConfig+0x28>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <TIM_Base_SetConfig+0xac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d108      	bne.n	8002512 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a1a      	ldr	r2, [pc, #104]	; (8002580 <TIM_Base_SetConfig+0xa8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d007      	beq.n	800252a <TIM_Base_SetConfig+0x52>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002520:	d003      	beq.n	800252a <TIM_Base_SetConfig+0x52>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <TIM_Base_SetConfig+0xac>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d108      	bne.n	800253c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	68fa      	ldr	r2, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <TIM_Base_SetConfig+0xa8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d103      	bne.n	8002570 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	615a      	str	r2, [r3, #20]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	40012c00 	.word	0x40012c00
 8002584:	40000400 	.word	0x40000400

08002588 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 030a 	bic.w	r3, r3, #10
 80025c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	621a      	str	r2, [r3, #32]
}
 80025da:	bf00      	nop
 80025dc:	371c      	adds	r7, #28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f023 0210 	bic.w	r2, r3, #16
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800260e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	031b      	lsls	r3, r3, #12
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4313      	orrs	r3, r2
 8002618:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002620:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	621a      	str	r2, [r3, #32]
}
 8002638:	bf00      	nop
 800263a:	371c      	adds	r7, #28
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr

08002642 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002642:	b480      	push	{r7}
 8002644:	b085      	sub	sp, #20
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002658:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4313      	orrs	r3, r2
 8002660:	f043 0307 	orr.w	r3, r3, #7
 8002664:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	609a      	str	r2, [r3, #8]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002676:	b480      	push	{r7}
 8002678:	b087      	sub	sp, #28
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002690:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	431a      	orrs	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	4313      	orrs	r3, r2
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	609a      	str	r2, [r3, #8]
}
 80026aa:	bf00      	nop
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr

080026b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026c8:	2302      	movs	r3, #2
 80026ca:	e041      	b.n	8002750 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d009      	beq.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002718:	d004      	beq.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a10      	ldr	r2, [pc, #64]	; (8002760 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10c      	bne.n	800273e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	4313      	orrs	r3, r2
 8002734:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40012c00 	.word	0x40012c00
 8002760:	40000400 	.word	0x40000400

08002764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <__libc_init_array>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	2600      	movs	r6, #0
 800278c:	4d0c      	ldr	r5, [pc, #48]	; (80027c0 <__libc_init_array+0x38>)
 800278e:	4c0d      	ldr	r4, [pc, #52]	; (80027c4 <__libc_init_array+0x3c>)
 8002790:	1b64      	subs	r4, r4, r5
 8002792:	10a4      	asrs	r4, r4, #2
 8002794:	42a6      	cmp	r6, r4
 8002796:	d109      	bne.n	80027ac <__libc_init_array+0x24>
 8002798:	f000 f822 	bl	80027e0 <_init>
 800279c:	2600      	movs	r6, #0
 800279e:	4d0a      	ldr	r5, [pc, #40]	; (80027c8 <__libc_init_array+0x40>)
 80027a0:	4c0a      	ldr	r4, [pc, #40]	; (80027cc <__libc_init_array+0x44>)
 80027a2:	1b64      	subs	r4, r4, r5
 80027a4:	10a4      	asrs	r4, r4, #2
 80027a6:	42a6      	cmp	r6, r4
 80027a8:	d105      	bne.n	80027b6 <__libc_init_array+0x2e>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b0:	4798      	blx	r3
 80027b2:	3601      	adds	r6, #1
 80027b4:	e7ee      	b.n	8002794 <__libc_init_array+0xc>
 80027b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ba:	4798      	blx	r3
 80027bc:	3601      	adds	r6, #1
 80027be:	e7f2      	b.n	80027a6 <__libc_init_array+0x1e>
 80027c0:	08002818 	.word	0x08002818
 80027c4:	08002818 	.word	0x08002818
 80027c8:	08002818 	.word	0x08002818
 80027cc:	0800281c 	.word	0x0800281c

080027d0 <memset>:
 80027d0:	4603      	mov	r3, r0
 80027d2:	4402      	add	r2, r0
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d100      	bne.n	80027da <memset+0xa>
 80027d8:	4770      	bx	lr
 80027da:	f803 1b01 	strb.w	r1, [r3], #1
 80027de:	e7f9      	b.n	80027d4 <memset+0x4>

080027e0 <_init>:
 80027e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e2:	bf00      	nop
 80027e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e6:	bc08      	pop	{r3}
 80027e8:	469e      	mov	lr, r3
 80027ea:	4770      	bx	lr

080027ec <_fini>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr
