
MCU_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002478  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a4  080025a4  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  080025a4  080025a4  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025a4  080025a4  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080025ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000040  080025ec  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f0  080025ec  000200f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a07  00000000  00000000  00020069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000176d  00000000  00000000  00028a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  0002a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ac18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000164a8  00000000  00000000  0002b570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a026  00000000  00000000  00041a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082035  00000000  00000000  0004ba3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cda73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f0  00000000  00000000  000cdac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000040 	.word	0x20000040
 8000128:	00000000 	.word	0x00000000
 800012c:	0800256c 	.word	0x0800256c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000044 	.word	0x20000044
 8000148:	0800256c 	.word	0x0800256c

0800014c <key1Press>:

int key1PressFlag = 0;
int key1HoldFlag = 0;

void key1Press()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	key1PressFlag = 1;
 8000150:	4b03      	ldr	r3, [pc, #12]	; (8000160 <key1Press+0x14>)
 8000152:	2201      	movs	r2, #1
 8000154:	601a      	str	r2, [r3, #0]
}
 8000156:	bf00      	nop
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	20000060 	.word	0x20000060

08000164 <key1Hold>:
void key1Hold()
{
 8000164:	b480      	push	{r7}
 8000166:	af00      	add	r7, sp, #0
	key1HoldFlag = 1;
 8000168:	4b03      	ldr	r3, [pc, #12]	; (8000178 <key1Hold+0x14>)
 800016a:	2201      	movs	r2, #1
 800016c:	601a      	str	r2, [r3, #0]
}
 800016e:	bf00      	nop
 8000170:	46bd      	mov	sp, r7
 8000172:	bc80      	pop	{r7}
 8000174:	4770      	bx	lr
 8000176:	bf00      	nop
 8000178:	20000064 	.word	0x20000064

0800017c <key1Release>:
void key1Release()
{
 800017c:	b480      	push	{r7}
 800017e:	af00      	add	r7, sp, #0
	timerForKey1Press = 0;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <key1Release+0x18>)
 8000182:	2200      	movs	r2, #0
 8000184:	601a      	str	r2, [r3, #0]
	key1HoldFlag = 0;
 8000186:	4b04      	ldr	r3, [pc, #16]	; (8000198 <key1Release+0x1c>)
 8000188:	2200      	movs	r2, #0
 800018a:	601a      	str	r2, [r3, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	2000005c 	.word	0x2000005c
 8000198:	20000064 	.word	0x20000064

0800019c <getKey1Input>:

void getKey1Input()
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
	key1Reg0 = key1Reg1;
 80001a0:	4b38      	ldr	r3, [pc, #224]	; (8000284 <getKey1Input+0xe8>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a38      	ldr	r2, [pc, #224]	; (8000288 <getKey1Input+0xec>)
 80001a6:	6013      	str	r3, [r2, #0]
	key1Reg1 = key1Reg2;
 80001a8:	4b38      	ldr	r3, [pc, #224]	; (800028c <getKey1Input+0xf0>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKey1Input+0xe8>)
 80001ae:	6013      	str	r3, [r2, #0]
	key1Reg2 = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 80001b0:	2104      	movs	r1, #4
 80001b2:	4837      	ldr	r0, [pc, #220]	; (8000290 <getKey1Input+0xf4>)
 80001b4:	f001 f99a 	bl	80014ec <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	461a      	mov	r2, r3
 80001bc:	4b33      	ldr	r3, [pc, #204]	; (800028c <getKey1Input+0xf0>)
 80001be:	601a      	str	r2, [r3, #0]
	// Only care about non-bounce
	if((key1Reg0 == key1Reg1) && (key1Reg1 == key1Reg2))
 80001c0:	4b31      	ldr	r3, [pc, #196]	; (8000288 <getKey1Input+0xec>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b2f      	ldr	r3, [pc, #188]	; (8000284 <getKey1Input+0xe8>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d159      	bne.n	8000280 <getKey1Input+0xe4>
 80001cc:	4b2d      	ldr	r3, [pc, #180]	; (8000284 <getKey1Input+0xe8>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b2e      	ldr	r3, [pc, #184]	; (800028c <getKey1Input+0xf0>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d153      	bne.n	8000280 <getKey1Input+0xe4>
	{
		if((key1Reg3 == NORMAL_STATE) && (key1Reg1 == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Released then Pressed
 80001d8:	4b2e      	ldr	r3, [pc, #184]	; (8000294 <getKey1Input+0xf8>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	2b01      	cmp	r3, #1
 80001de:	d10b      	bne.n	80001f8 <getKey1Input+0x5c>
 80001e0:	4b28      	ldr	r3, [pc, #160]	; (8000284 <getKey1Input+0xe8>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d107      	bne.n	80001f8 <getKey1Input+0x5c>
		{
			key1Reg3 = key1Reg2;
 80001e8:	4b28      	ldr	r3, [pc, #160]	; (800028c <getKey1Input+0xf0>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a29      	ldr	r2, [pc, #164]	; (8000294 <getKey1Input+0xf8>)
 80001ee:	6013      	str	r3, [r2, #0]
			timerForKey1Press = 2; //
 80001f0:	4b29      	ldr	r3, [pc, #164]	; (8000298 <getKey1Input+0xfc>)
 80001f2:	2202      	movs	r2, #2
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	e043      	b.n	8000280 <getKey1Input+0xe4>
		}
		else if((key1Reg3 == PRESSED_STATE) && (key1Reg1 == NORMAL_STATE))// Case: In the last 40ms, Read 2 accepted action: Pressed then Released
 80001f8:	4b26      	ldr	r3, [pc, #152]	; (8000294 <getKey1Input+0xf8>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d118      	bne.n	8000232 <getKey1Input+0x96>
 8000200:	4b20      	ldr	r3, [pc, #128]	; (8000284 <getKey1Input+0xe8>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2b01      	cmp	r3, #1
 8000206:	d114      	bne.n	8000232 <getKey1Input+0x96>
		{
			key1Reg3 = key1Reg2;
 8000208:	4b20      	ldr	r3, [pc, #128]	; (800028c <getKey1Input+0xf0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a21      	ldr	r2, [pc, #132]	; (8000294 <getKey1Input+0xf8>)
 800020e:	6013      	str	r3, [r2, #0]
			if(timerForKey1Press < 300)
 8000210:	4b21      	ldr	r3, [pc, #132]	; (8000298 <getKey1Input+0xfc>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000218:	da05      	bge.n	8000226 <getKey1Input+0x8a>
			{

				key1Press();
 800021a:	f7ff ff97 	bl	800014c <key1Press>
				timerForKey1Press = 0;
 800021e:	4b1e      	ldr	r3, [pc, #120]	; (8000298 <getKey1Input+0xfc>)
 8000220:	2200      	movs	r2, #0
 8000222:	601a      	str	r2, [r3, #0]
			if(timerForKey1Press < 300)
 8000224:	e02c      	b.n	8000280 <getKey1Input+0xe4>
			}
			else
			{
				key1Release();
 8000226:	f7ff ffa9 	bl	800017c <key1Release>
				timerForKey1Press = 0;
 800022a:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <getKey1Input+0xfc>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
			if(timerForKey1Press < 300)
 8000230:	e026      	b.n	8000280 <getKey1Input+0xe4>
			}
		}
		else if((key1Reg3 == PRESSED_STATE) && (key1Reg1 == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Pressed then Pressed
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <getKey1Input+0xf8>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d114      	bne.n	8000264 <getKey1Input+0xc8>
 800023a:	4b12      	ldr	r3, [pc, #72]	; (8000284 <getKey1Input+0xe8>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d110      	bne.n	8000264 <getKey1Input+0xc8>
		{
			key1Reg3 = key1Reg2;
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <getKey1Input+0xf0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	4a13      	ldr	r2, [pc, #76]	; (8000294 <getKey1Input+0xf8>)
 8000248:	6013      	str	r3, [r2, #0]
			timerForKey1Press++;
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <getKey1Input+0xfc>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	3301      	adds	r3, #1
 8000250:	4a11      	ldr	r2, [pc, #68]	; (8000298 <getKey1Input+0xfc>)
 8000252:	6013      	str	r3, [r2, #0]
			if(timerForKey1Press >= 300)
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <getKey1Input+0xfc>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800025c:	db10      	blt.n	8000280 <getKey1Input+0xe4>
			{
				key1Hold();
 800025e:	f7ff ff81 	bl	8000164 <key1Hold>
			if(timerForKey1Press >= 300)
 8000262:	e00d      	b.n	8000280 <getKey1Input+0xe4>
			}
		}
		else //Case: In the last 40ms, Read 2 accepted action: Released then Released
		{
			key1Reg3 = key1Reg2;
 8000264:	4b09      	ldr	r3, [pc, #36]	; (800028c <getKey1Input+0xf0>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0a      	ldr	r2, [pc, #40]	; (8000294 <getKey1Input+0xf8>)
 800026a:	6013      	str	r3, [r2, #0]
			timerForKey1Press = 0;
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <getKey1Input+0xfc>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
			key1HoldFlag = 0;
 8000272:	4b0a      	ldr	r3, [pc, #40]	; (800029c <getKey1Input+0x100>)
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
			key1PressFlag = 0;
 8000278:	4b09      	ldr	r3, [pc, #36]	; (80002a0 <getKey1Input+0x104>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800027e:	e7ff      	b.n	8000280 <getKey1Input+0xe4>
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000004 	.word	0x20000004
 8000288:	20000000 	.word	0x20000000
 800028c:	20000008 	.word	0x20000008
 8000290:	40010800 	.word	0x40010800
 8000294:	2000000c 	.word	0x2000000c
 8000298:	2000005c 	.word	0x2000005c
 800029c:	20000064 	.word	0x20000064
 80002a0:	20000060 	.word	0x20000060

080002a4 <key2Press>:

int key2PressFlag = 0;
int key2HoldFlag = 0;

void key2Press()
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
	key2PressFlag = 1;
 80002a8:	4b03      	ldr	r3, [pc, #12]	; (80002b8 <key2Press+0x14>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	601a      	str	r2, [r3, #0]
}
 80002ae:	bf00      	nop
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bc80      	pop	{r7}
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	2000006c 	.word	0x2000006c

080002bc <key2Hold>:
void key2Hold()
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	Led7SegDisplayValue++;
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <key2Hold+0x2c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	3301      	adds	r3, #1
 80002c6:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <key2Hold+0x2c>)
 80002c8:	6013      	str	r3, [r2, #0]
	if(Led7SegDisplayValue > 9){Led7SegDisplayValue=0;}
 80002ca:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <key2Hold+0x2c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2b09      	cmp	r3, #9
 80002d0:	dd02      	ble.n	80002d8 <key2Hold+0x1c>
 80002d2:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <key2Hold+0x2c>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
	key2HoldFlag = 1;
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <key2Hold+0x30>)
 80002da:	2201      	movs	r2, #1
 80002dc:	601a      	str	r2, [r3, #0]
	setTimer4(100);
 80002de:	2064      	movs	r0, #100	; 0x64
 80002e0:	f000 fd38 	bl	8000d54 <setTimer4>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	20000080 	.word	0x20000080
 80002ec:	20000070 	.word	0x20000070

080002f0 <key2Release>:
void key2Release()
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	timerForKey2Press = 0;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <key2Release+0x18>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
	key2HoldFlag = 0;
 80002fa:	4b04      	ldr	r3, [pc, #16]	; (800030c <key2Release+0x1c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	601a      	str	r2, [r3, #0]
}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	20000068 	.word	0x20000068
 800030c:	20000070 	.word	0x20000070

08000310 <getKey2Input>:

void getKey2Input()
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	key2Reg0 = key2Reg1;
 8000314:	4b3b      	ldr	r3, [pc, #236]	; (8000404 <getKey2Input+0xf4>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3b      	ldr	r2, [pc, #236]	; (8000408 <getKey2Input+0xf8>)
 800031a:	6013      	str	r3, [r2, #0]
	key2Reg1 = key2Reg2;
 800031c:	4b3b      	ldr	r3, [pc, #236]	; (800040c <getKey2Input+0xfc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a38      	ldr	r2, [pc, #224]	; (8000404 <getKey2Input+0xf4>)
 8000322:	6013      	str	r3, [r2, #0]
	key2Reg2 = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000324:	2108      	movs	r1, #8
 8000326:	483a      	ldr	r0, [pc, #232]	; (8000410 <getKey2Input+0x100>)
 8000328:	f001 f8e0 	bl	80014ec <HAL_GPIO_ReadPin>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	4b36      	ldr	r3, [pc, #216]	; (800040c <getKey2Input+0xfc>)
 8000332:	601a      	str	r2, [r3, #0]
	// Only care about non-bounce
	if((key2Reg0 == key2Reg1) && (key2Reg1 == key2Reg2))
 8000334:	4b34      	ldr	r3, [pc, #208]	; (8000408 <getKey2Input+0xf8>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b32      	ldr	r3, [pc, #200]	; (8000404 <getKey2Input+0xf4>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	429a      	cmp	r2, r3
 800033e:	d15e      	bne.n	80003fe <getKey2Input+0xee>
 8000340:	4b30      	ldr	r3, [pc, #192]	; (8000404 <getKey2Input+0xf4>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b31      	ldr	r3, [pc, #196]	; (800040c <getKey2Input+0xfc>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	429a      	cmp	r2, r3
 800034a:	d158      	bne.n	80003fe <getKey2Input+0xee>
	{
		if((key2Reg3 == NORMAL_STATE) && (key2Reg1 == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Released then Pressed
 800034c:	4b31      	ldr	r3, [pc, #196]	; (8000414 <getKey2Input+0x104>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	2b01      	cmp	r3, #1
 8000352:	d10b      	bne.n	800036c <getKey2Input+0x5c>
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <getKey2Input+0xf4>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d107      	bne.n	800036c <getKey2Input+0x5c>
		{
			key2Reg3 = key2Reg2;
 800035c:	4b2b      	ldr	r3, [pc, #172]	; (800040c <getKey2Input+0xfc>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a2c      	ldr	r2, [pc, #176]	; (8000414 <getKey2Input+0x104>)
 8000362:	6013      	str	r3, [r2, #0]
			timerForKey2Press = 2; //
 8000364:	4b2c      	ldr	r3, [pc, #176]	; (8000418 <getKey2Input+0x108>)
 8000366:	2202      	movs	r2, #2
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	e048      	b.n	80003fe <getKey2Input+0xee>
		}
		else if((key2Reg3 == PRESSED_STATE) && (key2Reg1 == NORMAL_STATE))// Case: In the last 40ms, Read 2 accepted action: Pressed then Released
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <getKey2Input+0x104>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d118      	bne.n	80003a6 <getKey2Input+0x96>
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <getKey2Input+0xf4>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b01      	cmp	r3, #1
 800037a:	d114      	bne.n	80003a6 <getKey2Input+0x96>
		{
			key2Reg3 = key2Reg2;
 800037c:	4b23      	ldr	r3, [pc, #140]	; (800040c <getKey2Input+0xfc>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a24      	ldr	r2, [pc, #144]	; (8000414 <getKey2Input+0x104>)
 8000382:	6013      	str	r3, [r2, #0]
			if(timerForKey2Press < 300)
 8000384:	4b24      	ldr	r3, [pc, #144]	; (8000418 <getKey2Input+0x108>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800038c:	da05      	bge.n	800039a <getKey2Input+0x8a>
			{

				key2Press();
 800038e:	f7ff ff89 	bl	80002a4 <key2Press>
				timerForKey2Press = 0;
 8000392:	4b21      	ldr	r3, [pc, #132]	; (8000418 <getKey2Input+0x108>)
 8000394:	2200      	movs	r2, #0
 8000396:	601a      	str	r2, [r3, #0]
			if(timerForKey2Press < 300)
 8000398:	e031      	b.n	80003fe <getKey2Input+0xee>
			}
			else
			{
				key2Release();
 800039a:	f7ff ffa9 	bl	80002f0 <key2Release>
				timerForKey2Press = 0;
 800039e:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <getKey2Input+0x108>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
			if(timerForKey2Press < 300)
 80003a4:	e02b      	b.n	80003fe <getKey2Input+0xee>
			}
		}
		else if((key2Reg3 == PRESSED_STATE) && (key2Reg1 == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Pressed then Pressed
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <getKey2Input+0x104>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d118      	bne.n	80003e0 <getKey2Input+0xd0>
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <getKey2Input+0xf4>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d114      	bne.n	80003e0 <getKey2Input+0xd0>
		{
			key2Reg3 = key2Reg2;
 80003b6:	4b15      	ldr	r3, [pc, #84]	; (800040c <getKey2Input+0xfc>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a16      	ldr	r2, [pc, #88]	; (8000414 <getKey2Input+0x104>)
 80003bc:	6013      	str	r3, [r2, #0]
			timerForKey2Press++;
 80003be:	4b16      	ldr	r3, [pc, #88]	; (8000418 <getKey2Input+0x108>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	3301      	adds	r3, #1
 80003c4:	4a14      	ldr	r2, [pc, #80]	; (8000418 <getKey2Input+0x108>)
 80003c6:	6013      	str	r3, [r2, #0]
			if(timerForKey2Press >= 300)
 80003c8:	4b13      	ldr	r3, [pc, #76]	; (8000418 <getKey2Input+0x108>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80003d0:	db14      	blt.n	80003fc <getKey2Input+0xec>
			{
				if(!key2HoldFlag)
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <getKey2Input+0x10c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d110      	bne.n	80003fc <getKey2Input+0xec>
				{key2Hold();}
 80003da:	f7ff ff6f 	bl	80002bc <key2Hold>
			if(timerForKey2Press >= 300)
 80003de:	e00d      	b.n	80003fc <getKey2Input+0xec>
			}
		}
		else //Case: In the last 40ms, Read 2 accepted action: Released then Released
		{
			key2Reg3 = key2Reg2;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <getKey2Input+0xfc>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a0b      	ldr	r2, [pc, #44]	; (8000414 <getKey2Input+0x104>)
 80003e6:	6013      	str	r3, [r2, #0]
			timerForKey2Press = 0;
 80003e8:	4b0b      	ldr	r3, [pc, #44]	; (8000418 <getKey2Input+0x108>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
			key2HoldFlag = 0;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <getKey2Input+0x10c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
			key2PressFlag = 0;
 80003f4:	4b0a      	ldr	r3, [pc, #40]	; (8000420 <getKey2Input+0x110>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80003fa:	e000      	b.n	80003fe <getKey2Input+0xee>
			if(timerForKey2Press >= 300)
 80003fc:	bf00      	nop
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20000014 	.word	0x20000014
 8000408:	20000010 	.word	0x20000010
 800040c:	20000018 	.word	0x20000018
 8000410:	40010800 	.word	0x40010800
 8000414:	2000001c 	.word	0x2000001c
 8000418:	20000068 	.word	0x20000068
 800041c:	20000070 	.word	0x20000070
 8000420:	2000006c 	.word	0x2000006c

08000424 <key3Press>:

int key3PressFlag = 0;
int key3HoldFlag = 0;

void key3Press()
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
	key3PressFlag = 1;
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <key3Press+0x14>)
 800042a:	2201      	movs	r2, #1
 800042c:	601a      	str	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	20000078 	.word	0x20000078

0800043c <key3Hold>:
void key3Hold()
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	Led7SegDisplayValue--;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <key3Hold+0x2c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	3b01      	subs	r3, #1
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <key3Hold+0x2c>)
 8000448:	6013      	str	r3, [r2, #0]
	if(Led7SegDisplayValue < 0){Led7SegDisplayValue=9;}
 800044a:	4b07      	ldr	r3, [pc, #28]	; (8000468 <key3Hold+0x2c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	da02      	bge.n	8000458 <key3Hold+0x1c>
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <key3Hold+0x2c>)
 8000454:	2209      	movs	r2, #9
 8000456:	601a      	str	r2, [r3, #0]
	key3HoldFlag = 1;
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <key3Hold+0x30>)
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
	setTimer4(100);
 800045e:	2064      	movs	r0, #100	; 0x64
 8000460:	f000 fc78 	bl	8000d54 <setTimer4>
}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000080 	.word	0x20000080
 800046c:	2000007c 	.word	0x2000007c

08000470 <key3Release>:
void key3Release()
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	timerForKey3Press = 0;
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <key3Release+0x18>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
	key3HoldFlag = 0;
 800047a:	4b04      	ldr	r3, [pc, #16]	; (800048c <key3Release+0x1c>)
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	20000074 	.word	0x20000074
 800048c:	2000007c 	.word	0x2000007c

08000490 <getKey3Input>:

void getKey3Input()
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
	key3Reg0 = key3Reg1;
 8000494:	4b3b      	ldr	r3, [pc, #236]	; (8000584 <getKey3Input+0xf4>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a3b      	ldr	r2, [pc, #236]	; (8000588 <getKey3Input+0xf8>)
 800049a:	6013      	str	r3, [r2, #0]
	key3Reg1 = key3Reg2;
 800049c:	4b3b      	ldr	r3, [pc, #236]	; (800058c <getKey3Input+0xfc>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4a38      	ldr	r2, [pc, #224]	; (8000584 <getKey3Input+0xf4>)
 80004a2:	6013      	str	r3, [r2, #0]
	key3Reg2 = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 80004a4:	2110      	movs	r1, #16
 80004a6:	483a      	ldr	r0, [pc, #232]	; (8000590 <getKey3Input+0x100>)
 80004a8:	f001 f820 	bl	80014ec <HAL_GPIO_ReadPin>
 80004ac:	4603      	mov	r3, r0
 80004ae:	461a      	mov	r2, r3
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <getKey3Input+0xfc>)
 80004b2:	601a      	str	r2, [r3, #0]
	// Only care about non-bounce
	if((key3Reg0 == key3Reg1) && (key3Reg1 == key3Reg2))
 80004b4:	4b34      	ldr	r3, [pc, #208]	; (8000588 <getKey3Input+0xf8>)
 80004b6:	681a      	ldr	r2, [r3, #0]
 80004b8:	4b32      	ldr	r3, [pc, #200]	; (8000584 <getKey3Input+0xf4>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d15e      	bne.n	800057e <getKey3Input+0xee>
 80004c0:	4b30      	ldr	r3, [pc, #192]	; (8000584 <getKey3Input+0xf4>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b31      	ldr	r3, [pc, #196]	; (800058c <getKey3Input+0xfc>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	d158      	bne.n	800057e <getKey3Input+0xee>
	{
		if((key3Reg3 == NORMAL_STATE) && (key3Reg1 == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Released then Pressed
 80004cc:	4b31      	ldr	r3, [pc, #196]	; (8000594 <getKey3Input+0x104>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b01      	cmp	r3, #1
 80004d2:	d10b      	bne.n	80004ec <getKey3Input+0x5c>
 80004d4:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <getKey3Input+0xf4>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d107      	bne.n	80004ec <getKey3Input+0x5c>
		{
			key3Reg3 = key3Reg2;
 80004dc:	4b2b      	ldr	r3, [pc, #172]	; (800058c <getKey3Input+0xfc>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a2c      	ldr	r2, [pc, #176]	; (8000594 <getKey3Input+0x104>)
 80004e2:	6013      	str	r3, [r2, #0]
			timerForKey3Press = 2; //
 80004e4:	4b2c      	ldr	r3, [pc, #176]	; (8000598 <getKey3Input+0x108>)
 80004e6:	2202      	movs	r2, #2
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	e048      	b.n	800057e <getKey3Input+0xee>
		}
		else if((key3Reg3 == PRESSED_STATE) && (key3Reg1 == NORMAL_STATE))// Case: In the last 40ms, Read 2 accepted action: Pressed then Released
 80004ec:	4b29      	ldr	r3, [pc, #164]	; (8000594 <getKey3Input+0x104>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d118      	bne.n	8000526 <getKey3Input+0x96>
 80004f4:	4b23      	ldr	r3, [pc, #140]	; (8000584 <getKey3Input+0xf4>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d114      	bne.n	8000526 <getKey3Input+0x96>
		{
			key3Reg3 = key3Reg2;
 80004fc:	4b23      	ldr	r3, [pc, #140]	; (800058c <getKey3Input+0xfc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a24      	ldr	r2, [pc, #144]	; (8000594 <getKey3Input+0x104>)
 8000502:	6013      	str	r3, [r2, #0]
			if(timerForKey3Press < 300)
 8000504:	4b24      	ldr	r3, [pc, #144]	; (8000598 <getKey3Input+0x108>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800050c:	da05      	bge.n	800051a <getKey3Input+0x8a>
			{

				key3Press();
 800050e:	f7ff ff89 	bl	8000424 <key3Press>
				timerForKey3Press = 0;
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <getKey3Input+0x108>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
			if(timerForKey3Press < 300)
 8000518:	e031      	b.n	800057e <getKey3Input+0xee>
			}
			else
			{
				key3Release();
 800051a:	f7ff ffa9 	bl	8000470 <key3Release>
				timerForKey3Press = 0;
 800051e:	4b1e      	ldr	r3, [pc, #120]	; (8000598 <getKey3Input+0x108>)
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
			if(timerForKey3Press < 300)
 8000524:	e02b      	b.n	800057e <getKey3Input+0xee>
			}
		}
		else if((key3Reg3 == PRESSED_STATE) && (key3Reg1 == PRESSED_STATE))//Case: In the last 40ms, Read 2 accepted action: Pressed then Pressed
 8000526:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <getKey3Input+0x104>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d118      	bne.n	8000560 <getKey3Input+0xd0>
 800052e:	4b15      	ldr	r3, [pc, #84]	; (8000584 <getKey3Input+0xf4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d114      	bne.n	8000560 <getKey3Input+0xd0>
		{
			key3Reg3 = key3Reg2;
 8000536:	4b15      	ldr	r3, [pc, #84]	; (800058c <getKey3Input+0xfc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a16      	ldr	r2, [pc, #88]	; (8000594 <getKey3Input+0x104>)
 800053c:	6013      	str	r3, [r2, #0]
			timerForKey3Press++;
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <getKey3Input+0x108>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	3301      	adds	r3, #1
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <getKey3Input+0x108>)
 8000546:	6013      	str	r3, [r2, #0]
			if(timerForKey3Press >= 300)
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <getKey3Input+0x108>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000550:	db14      	blt.n	800057c <getKey3Input+0xec>
			{
				if(!key3HoldFlag)
 8000552:	4b12      	ldr	r3, [pc, #72]	; (800059c <getKey3Input+0x10c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d110      	bne.n	800057c <getKey3Input+0xec>
				{key3Hold();}
 800055a:	f7ff ff6f 	bl	800043c <key3Hold>
			if(timerForKey3Press >= 300)
 800055e:	e00d      	b.n	800057c <getKey3Input+0xec>
			}
		}
		else //Case: In the last 40ms, Read 2 accepted action: Released then Released
		{
			key3Reg3 = key3Reg2;
 8000560:	4b0a      	ldr	r3, [pc, #40]	; (800058c <getKey3Input+0xfc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <getKey3Input+0x104>)
 8000566:	6013      	str	r3, [r2, #0]
			timerForKey3Press = 0;
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <getKey3Input+0x108>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
			key3HoldFlag = 0;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <getKey3Input+0x10c>)
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
			key3PressFlag = 0;
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <getKey3Input+0x110>)
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
		}
	}
}
 800057a:	e000      	b.n	800057e <getKey3Input+0xee>
			if(timerForKey3Press >= 300)
 800057c:	bf00      	nop
}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000024 	.word	0x20000024
 8000588:	20000020 	.word	0x20000020
 800058c:	20000028 	.word	0x20000028
 8000590:	40010800 	.word	0x40010800
 8000594:	2000002c 	.word	0x2000002c
 8000598:	20000074 	.word	0x20000074
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	20000078 	.word	0x20000078

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 fcb6 	bl	8000f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f836 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8bc 	bl	800072c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b4:	f000 f86e 	bl	8000694 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  restartSystem();
 80005b8:	f000 f916 	bl	80007e8 <restartSystem>
  HAL_TIM_Base_Start_IT(&htim2);
 80005bc:	4812      	ldr	r0, [pc, #72]	; (8000608 <main+0x64>)
 80005be:	f001 fc15 	bl	8001dec <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(key1PressFlag)
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <main+0x68>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d005      	beq.n	80005d6 <main+0x32>
	  {
		  restartSystem();
 80005ca:	f000 f90d 	bl	80007e8 <restartSystem>
		  key1PressFlag = 0;
 80005ce:	4b0f      	ldr	r3, [pc, #60]	; (800060c <main+0x68>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	e008      	b.n	80005e8 <main+0x44>
	  }
	  else if(key1HoldFlag)
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <main+0x6c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d002      	beq.n	80005e4 <main+0x40>
	  {
		  restartSystem();
 80005de:	f000 f903 	bl	80007e8 <restartSystem>
 80005e2:	e001      	b.n	80005e8 <main+0x44>
	  }
	  else
	  {
		  fsm_simple_buttons_run();
 80005e4:	f000 fa66 	bl	8000ab4 <fsm_simple_buttons_run>
	  }
	  if(timer1_flag)
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <main+0x70>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0e8      	beq.n	80005c2 <main+0x1e>
	  {
		  timer1_flag = 0;
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <main+0x70>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
		  setTimer1(100);
 80005f6:	2064      	movs	r0, #100	; 0x64
 80005f8:	f000 fb22 	bl	8000c40 <setTimer1>
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80005fc:	2120      	movs	r1, #32
 80005fe:	4806      	ldr	r0, [pc, #24]	; (8000618 <main+0x74>)
 8000600:	f000 ffa3 	bl	800154a <HAL_GPIO_TogglePin>
	  if(key1PressFlag)
 8000604:	e7dd      	b.n	80005c2 <main+0x1e>
 8000606:	bf00      	nop
 8000608:	200000a4 	.word	0x200000a4
 800060c:	20000060 	.word	0x20000060
 8000610:	20000064 	.word	0x20000064
 8000614:	20000084 	.word	0x20000084
 8000618:	40010800 	.word	0x40010800

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b090      	sub	sp, #64	; 0x40
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0318 	add.w	r3, r7, #24
 8000626:	2228      	movs	r2, #40	; 0x28
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 ff96 	bl	800255c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063e:	2302      	movs	r3, #2
 8000640:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	2301      	movs	r3, #1
 8000644:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000646:	2310      	movs	r3, #16
 8000648:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800064a:	2300      	movs	r3, #0
 800064c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	4618      	mov	r0, r3
 8000654:	f000 ff92 	bl	800157c <HAL_RCC_OscConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800065e:	f000 fae9 	bl	8000c34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f001 f9fe 	bl	8001a7c <HAL_RCC_ClockConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000686:	f000 fad5 	bl	8000c34 <Error_Handler>
  }
}
 800068a:	bf00      	nop
 800068c:	3740      	adds	r7, #64	; 0x40
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800069a:	f107 0308 	add.w	r3, r7, #8
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MX_TIM2_Init+0x94>)
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80006b8:	4b1b      	ldr	r3, [pc, #108]	; (8000728 <MX_TIM2_Init+0x94>)
 80006ba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b19      	ldr	r3, [pc, #100]	; (8000728 <MX_TIM2_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80006c6:	4b18      	ldr	r3, [pc, #96]	; (8000728 <MX_TIM2_Init+0x94>)
 80006c8:	2209      	movs	r2, #9
 80006ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b16      	ldr	r3, [pc, #88]	; (8000728 <MX_TIM2_Init+0x94>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <MX_TIM2_Init+0x94>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006d8:	4813      	ldr	r0, [pc, #76]	; (8000728 <MX_TIM2_Init+0x94>)
 80006da:	f001 fb37 	bl	8001d4c <HAL_TIM_Base_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80006e4:	f000 faa6 	bl	8000c34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006ee:	f107 0308 	add.w	r3, r7, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480c      	ldr	r0, [pc, #48]	; (8000728 <MX_TIM2_Init+0x94>)
 80006f6:	f001 fccd 	bl	8002094 <HAL_TIM_ConfigClockSource>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 fa98 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	4619      	mov	r1, r3
 8000710:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_TIM2_Init+0x94>)
 8000712:	f001 fe95 	bl	8002440 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800071c:	f000 fa8a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	3718      	adds	r7, #24
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000a4 	.word	0x200000a4

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_GPIO_Init+0xb0>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a25      	ldr	r2, [pc, #148]	; (80007dc <MX_GPIO_Init+0xb0>)
 8000746:	f043 0304 	orr.w	r3, r3, #4
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_GPIO_Init+0xb0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f003 0304 	and.w	r3, r3, #4
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_GPIO_Init+0xb0>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a1f      	ldr	r2, [pc, #124]	; (80007dc <MX_GPIO_Init+0xb0>)
 800075e:	f043 0308 	orr.w	r3, r3, #8
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_GPIO_Init+0xb0>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f003 0308 	and.w	r3, r3, #8
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	481a      	ldr	r0, [pc, #104]	; (80007e0 <MX_GPIO_Init+0xb4>)
 8000776:	f000 fed0 	bl	800151a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_a_Pin|LED7_b_Pin|LED7_c_Pin|LED7_d_Pin
 800077a:	2200      	movs	r2, #0
 800077c:	217f      	movs	r1, #127	; 0x7f
 800077e:	4819      	ldr	r0, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xb8>)
 8000780:	f000 fecb 	bl	800151a <HAL_GPIO_WritePin>
                          |LED7_e_Pin|LED7_f_Pin|LED7_g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000784:	231c      	movs	r3, #28
 8000786:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078c:	2301      	movs	r3, #1
 800078e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 0308 	add.w	r3, r7, #8
 8000794:	4619      	mov	r1, r3
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xb4>)
 8000798:	f000 fd2e 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800079c:	2320      	movs	r3, #32
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2302      	movs	r3, #2
 80007aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	480b      	ldr	r0, [pc, #44]	; (80007e0 <MX_GPIO_Init+0xb4>)
 80007b4:	f000 fd20 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_a_Pin LED7_b_Pin LED7_c_Pin LED7_d_Pin
                           LED7_e_Pin LED7_f_Pin LED7_g_Pin */
  GPIO_InitStruct.Pin = LED7_a_Pin|LED7_b_Pin|LED7_c_Pin|LED7_d_Pin
 80007b8:	237f      	movs	r3, #127	; 0x7f
 80007ba:	60bb      	str	r3, [r7, #8]
                          |LED7_e_Pin|LED7_f_Pin|LED7_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2302      	movs	r3, #2
 80007c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c8:	f107 0308 	add.w	r3, r7, #8
 80007cc:	4619      	mov	r1, r3
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_GPIO_Init+0xb8>)
 80007d0:	f000 fd12 	bl	80011f8 <HAL_GPIO_Init>

}
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010800 	.word	0x40010800
 80007e4:	40010c00 	.word	0x40010c00

080007e8 <restartSystem>:

/* USER CODE BEGIN 4 */
void restartSystem()
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	status = 1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <restartSystem+0x44>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	601a      	str	r2, [r3, #0]
	setTimer1(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fa24 	bl	8000c40 <setTimer1>
	setTimer2(100);
 80007f8:	2064      	movs	r0, #100	; 0x64
 80007fa:	f000 fa4f 	bl	8000c9c <setTimer2>
	setTimer3(1000);
 80007fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000802:	f000 fa79 	bl	8000cf8 <setTimer3>
	setTimer4(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f000 faa4 	bl	8000d54 <setTimer4>
	Led7SegDisplayValue = 0;
 800080c:	4b08      	ldr	r3, [pc, #32]	; (8000830 <restartSystem+0x48>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	4807      	ldr	r0, [pc, #28]	; (8000834 <restartSystem+0x4c>)
 8000818:	f000 fe7f 	bl	800151a <HAL_GPIO_WritePin>
	display7Seg(Led7SegDisplayValue,1);
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <restartSystem+0x48>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f81e 	bl	8000864 <display7Seg>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20000030 	.word	0x20000030
 8000830:	20000080 	.word	0x20000080
 8000834:	40010800 	.word	0x40010800

08000838 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	timer1Run();
 8000840:	f000 fa12 	bl	8000c68 <timer1Run>
	timer2Run();
 8000844:	f000 fa3e 	bl	8000cc4 <timer2Run>
	timer3Run();
 8000848:	f000 fa6a 	bl	8000d20 <timer3Run>
	timer4Run();
 800084c:	f000 fa96 	bl	8000d7c <timer4Run>
	getKey1Input();
 8000850:	f7ff fca4 	bl	800019c <getKey1Input>
	getKey2Input();
 8000854:	f7ff fd5c 	bl	8000310 <getKey2Input>
	getKey3Input();
 8000858:	f7ff fe1a 	bl	8000490 <getKey3Input>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <display7Seg>:

void display7Seg(int decimalVal, _Bool LEDstatus)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	70fb      	strb	r3, [r7, #3]
	if(decimalVal > 9)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b09      	cmp	r3, #9
 8000874:	dd01      	ble.n	800087a <display7Seg+0x16>
	{
		decimalVal = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
	}
	if(LEDstatus)
 800087a:	78fb      	ldrb	r3, [r7, #3]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d07d      	beq.n	800097c <display7Seg+0x118>
	{
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, (decimalVal==1||decimalVal==4) ? SET:RESET);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d002      	beq.n	800088c <display7Seg+0x28>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b04      	cmp	r3, #4
 800088a:	d101      	bne.n	8000890 <display7Seg+0x2c>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <display7Seg+0x2e>
 8000890:	2300      	movs	r3, #0
 8000892:	b2db      	uxtb	r3, r3
 8000894:	461a      	mov	r2, r3
 8000896:	2101      	movs	r1, #1
 8000898:	484c      	ldr	r0, [pc, #304]	; (80009cc <display7Seg+0x168>)
 800089a:	f000 fe3e 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, (decimalVal==5||decimalVal==6) ? SET:RESET);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	d002      	beq.n	80008aa <display7Seg+0x46>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b06      	cmp	r3, #6
 80008a8:	d101      	bne.n	80008ae <display7Seg+0x4a>
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <display7Seg+0x4c>
 80008ae:	2300      	movs	r3, #0
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	461a      	mov	r2, r3
 80008b4:	2102      	movs	r1, #2
 80008b6:	4845      	ldr	r0, [pc, #276]	; (80009cc <display7Seg+0x168>)
 80008b8:	f000 fe2f 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, (decimalVal==2) ? SET:RESET);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	bf0c      	ite	eq
 80008c2:	2301      	moveq	r3, #1
 80008c4:	2300      	movne	r3, #0
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	2104      	movs	r1, #4
 80008cc:	483f      	ldr	r0, [pc, #252]	; (80009cc <display7Seg+0x168>)
 80008ce:	f000 fe24 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, (decimalVal==1||decimalVal==4 || decimalVal==7) ? SET:RESET);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d005      	beq.n	80008e4 <display7Seg+0x80>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d002      	beq.n	80008e4 <display7Seg+0x80>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b07      	cmp	r3, #7
 80008e2:	d101      	bne.n	80008e8 <display7Seg+0x84>
 80008e4:	2301      	movs	r3, #1
 80008e6:	e000      	b.n	80008ea <display7Seg+0x86>
 80008e8:	2300      	movs	r3, #0
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	2108      	movs	r1, #8
 80008f0:	4836      	ldr	r0, [pc, #216]	; (80009cc <display7Seg+0x168>)
 80008f2:	f000 fe12 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, (decimalVal==1||decimalVal==4 || decimalVal==3 || decimalVal==5 || decimalVal==7 || decimalVal==9) ? SET:RESET);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d00e      	beq.n	800091a <display7Seg+0xb6>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b04      	cmp	r3, #4
 8000900:	d00b      	beq.n	800091a <display7Seg+0xb6>
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b03      	cmp	r3, #3
 8000906:	d008      	beq.n	800091a <display7Seg+0xb6>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b05      	cmp	r3, #5
 800090c:	d005      	beq.n	800091a <display7Seg+0xb6>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b07      	cmp	r3, #7
 8000912:	d002      	beq.n	800091a <display7Seg+0xb6>
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b09      	cmp	r3, #9
 8000918:	d101      	bne.n	800091e <display7Seg+0xba>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <display7Seg+0xbc>
 800091e:	2300      	movs	r3, #0
 8000920:	b2db      	uxtb	r3, r3
 8000922:	461a      	mov	r2, r3
 8000924:	2110      	movs	r1, #16
 8000926:	4829      	ldr	r0, [pc, #164]	; (80009cc <display7Seg+0x168>)
 8000928:	f000 fdf7 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, (decimalVal==1||decimalVal==2||decimalVal==3||decimalVal==7) ? SET:RESET);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d008      	beq.n	8000944 <display7Seg+0xe0>
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b02      	cmp	r3, #2
 8000936:	d005      	beq.n	8000944 <display7Seg+0xe0>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	2b03      	cmp	r3, #3
 800093c:	d002      	beq.n	8000944 <display7Seg+0xe0>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2b07      	cmp	r3, #7
 8000942:	d101      	bne.n	8000948 <display7Seg+0xe4>
 8000944:	2301      	movs	r3, #1
 8000946:	e000      	b.n	800094a <display7Seg+0xe6>
 8000948:	2300      	movs	r3, #0
 800094a:	b2db      	uxtb	r3, r3
 800094c:	461a      	mov	r2, r3
 800094e:	2120      	movs	r1, #32
 8000950:	481e      	ldr	r0, [pc, #120]	; (80009cc <display7Seg+0x168>)
 8000952:	f000 fde2 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, (decimalVal==0||decimalVal==1||decimalVal==7) ? SET:RESET);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <display7Seg+0x104>
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d002      	beq.n	8000968 <display7Seg+0x104>
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b07      	cmp	r3, #7
 8000966:	d101      	bne.n	800096c <display7Seg+0x108>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <display7Seg+0x10a>
 800096c:	2300      	movs	r3, #0
 800096e:	b2db      	uxtb	r3, r3
 8000970:	461a      	mov	r2, r3
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <display7Seg+0x168>)
 8000976:	f000 fdd0 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
	}
}
 800097a:	e022      	b.n	80009c2 <display7Seg+0x15e>
		HAL_GPIO_WritePin(LED7_a_GPIO_Port, LED7_a_Pin, SET);
 800097c:	2201      	movs	r2, #1
 800097e:	2101      	movs	r1, #1
 8000980:	4812      	ldr	r0, [pc, #72]	; (80009cc <display7Seg+0x168>)
 8000982:	f000 fdca 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_b_GPIO_Port, LED7_b_Pin, SET);
 8000986:	2201      	movs	r2, #1
 8000988:	2102      	movs	r1, #2
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <display7Seg+0x168>)
 800098c:	f000 fdc5 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_c_GPIO_Port, LED7_c_Pin, SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2104      	movs	r1, #4
 8000994:	480d      	ldr	r0, [pc, #52]	; (80009cc <display7Seg+0x168>)
 8000996:	f000 fdc0 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_d_GPIO_Port, LED7_d_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2108      	movs	r1, #8
 800099e:	480b      	ldr	r0, [pc, #44]	; (80009cc <display7Seg+0x168>)
 80009a0:	f000 fdbb 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_e_GPIO_Port, LED7_e_Pin, SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2110      	movs	r1, #16
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <display7Seg+0x168>)
 80009aa:	f000 fdb6 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_f_GPIO_Port, LED7_f_Pin, SET);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2120      	movs	r1, #32
 80009b2:	4806      	ldr	r0, [pc, #24]	; (80009cc <display7Seg+0x168>)
 80009b4:	f000 fdb1 	bl	800151a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_g_GPIO_Port, LED7_g_Pin, SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <display7Seg+0x168>)
 80009be:	f000 fdac 	bl	800151a <HAL_GPIO_WritePin>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010c00 	.word	0x40010c00

080009d0 <key_press_check>:

void key_press_check()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	if(key2PressFlag)
 80009d4:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <key_press_check+0xcc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d01b      	beq.n	8000a14 <key_press_check+0x44>
	{
		setTimer3(1000);
 80009dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009e0:	f000 f98a 	bl	8000cf8 <setTimer3>
		Led7SegDisplayValue++;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <key_press_check+0xd0>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3301      	adds	r3, #1
 80009ea:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <key_press_check+0xd0>)
 80009ec:	6013      	str	r3, [r2, #0]
		if(Led7SegDisplayValue > 9){Led7SegDisplayValue=0;}
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <key_press_check+0xd0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b09      	cmp	r3, #9
 80009f4:	dd02      	ble.n	80009fc <key_press_check+0x2c>
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <key_press_check+0xd0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
		display7Seg(Led7SegDisplayValue,1);
 80009fc:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <key_press_check+0xd0>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff ff2e 	bl	8000864 <display7Seg>
		status = WAITING;
 8000a08:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <key_press_check+0xd4>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	601a      	str	r2, [r3, #0]
		key2PressFlag = 0;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <key_press_check+0xcc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
	}
	if(key3PressFlag)
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <key_press_check+0xd8>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d01b      	beq.n	8000a54 <key_press_check+0x84>
	{
		setTimer3(1000);
 8000a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a20:	f000 f96a 	bl	8000cf8 <setTimer3>
		Led7SegDisplayValue--;
 8000a24:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <key_press_check+0xd0>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <key_press_check+0xd0>)
 8000a2c:	6013      	str	r3, [r2, #0]
		if(Led7SegDisplayValue < 0){Led7SegDisplayValue=9;}
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	; (8000aa0 <key_press_check+0xd0>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da02      	bge.n	8000a3c <key_press_check+0x6c>
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <key_press_check+0xd0>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	601a      	str	r2, [r3, #0]
		display7Seg(Led7SegDisplayValue,1);
 8000a3c:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <key_press_check+0xd0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2101      	movs	r1, #1
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff0e 	bl	8000864 <display7Seg>
		status = WAITING;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <key_press_check+0xd4>)
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	601a      	str	r2, [r3, #0]
		key3PressFlag = 0;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <key_press_check+0xd8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
	}
	if(key2HoldFlag)
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <key_press_check+0xdc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d00c      	beq.n	8000a76 <key_press_check+0xa6>
		{
			setTimer3(1000);
 8000a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a60:	f000 f94a 	bl	8000cf8 <setTimer3>
			display7Seg(Led7SegDisplayValue,1);
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <key_press_check+0xd0>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fefa 	bl	8000864 <display7Seg>
			status = INC_LONG_PRESS;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <key_press_check+0xd4>)
 8000a72:	2204      	movs	r2, #4
 8000a74:	601a      	str	r2, [r3, #0]

		}
	if(key3HoldFlag)
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <key_press_check+0xe0>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d00c      	beq.n	8000a98 <key_press_check+0xc8>
		{
			setTimer3(1000);
 8000a7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a82:	f000 f939 	bl	8000cf8 <setTimer3>
			display7Seg(Led7SegDisplayValue,1);
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <key_press_check+0xd0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fee9 	bl	8000864 <display7Seg>
			status = DEC_LONG_PRESS;
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <key_press_check+0xd4>)
 8000a94:	2205      	movs	r2, #5
 8000a96:	601a      	str	r2, [r3, #0]
		}
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000006c 	.word	0x2000006c
 8000aa0:	20000080 	.word	0x20000080
 8000aa4:	20000030 	.word	0x20000030
 8000aa8:	20000078 	.word	0x20000078
 8000aac:	20000070 	.word	0x20000070
 8000ab0:	2000007c 	.word	0x2000007c

08000ab4 <fsm_simple_buttons_run>:
void fsm_simple_buttons_run()
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	switch (status) {
 8000ab8:	4b57      	ldr	r3, [pc, #348]	; (8000c18 <fsm_simple_buttons_run+0x164>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	2b05      	cmp	r3, #5
 8000ac0:	f200 809f 	bhi.w	8000c02 <fsm_simple_buttons_run+0x14e>
 8000ac4:	a201      	add	r2, pc, #4	; (adr r2, 8000acc <fsm_simple_buttons_run+0x18>)
 8000ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aca:	bf00      	nop
 8000acc:	08000ae5 	.word	0x08000ae5
 8000ad0:	08000aeb 	.word	0x08000aeb
 8000ad4:	08000b0f 	.word	0x08000b0f
 8000ad8:	08000b5d 	.word	0x08000b5d
 8000adc:	08000bad 	.word	0x08000bad
 8000ae0:	08000bfd 	.word	0x08000bfd
		case RESTART_INIT:
			key_press_check();
 8000ae4:	f7ff ff74 	bl	80009d0 <key_press_check>
			break;
 8000ae8:	e094      	b.n	8000c14 <fsm_simple_buttons_run+0x160>

		case WAITING:
			key_press_check();
 8000aea:	f7ff ff71 	bl	80009d0 <key_press_check>
			if(timer3_flag)
 8000aee:	4b4b      	ldr	r3, [pc, #300]	; (8000c1c <fsm_simple_buttons_run+0x168>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 8087 	beq.w	8000c06 <fsm_simple_buttons_run+0x152>
			{
				timer3_flag = 0;
 8000af8:	4b48      	ldr	r3, [pc, #288]	; (8000c1c <fsm_simple_buttons_run+0x168>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
				status = COUNTING;
 8000afe:	4b46      	ldr	r3, [pc, #280]	; (8000c18 <fsm_simple_buttons_run+0x164>)
 8000b00:	2203      	movs	r2, #3
 8000b02:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b08:	f000 f8f6 	bl	8000cf8 <setTimer3>
			}
			break;
 8000b0c:	e07b      	b.n	8000c06 <fsm_simple_buttons_run+0x152>

		case COUNTING:
			if(timer2_flag)
 8000b0e:	4b44      	ldr	r3, [pc, #272]	; (8000c20 <fsm_simple_buttons_run+0x16c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d014      	beq.n	8000b40 <fsm_simple_buttons_run+0x8c>
			{
				timer2_flag = 0;
 8000b16:	4b42      	ldr	r3, [pc, #264]	; (8000c20 <fsm_simple_buttons_run+0x16c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
				if(Led7SegDisplayValue > 0){Led7SegDisplayValue--;}
 8000b1c:	4b41      	ldr	r3, [pc, #260]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dd04      	ble.n	8000b2e <fsm_simple_buttons_run+0x7a>
 8000b24:	4b3f      	ldr	r3, [pc, #252]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	4a3e      	ldr	r2, [pc, #248]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b2c:	6013      	str	r3, [r2, #0]
				display7Seg(Led7SegDisplayValue,1);
 8000b2e:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2101      	movs	r1, #1
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe95 	bl	8000864 <display7Seg>
				setTimer2(100);
 8000b3a:	2064      	movs	r0, #100	; 0x64
 8000b3c:	f000 f8ae 	bl	8000c9c <setTimer2>
			}
			key_press_check();
 8000b40:	f7ff ff46 	bl	80009d0 <key_press_check>
			if((Led7SegDisplayValue <= 0) || (Led7SegDisplayValue > 9)){status = STOP_STATE;}
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	dd03      	ble.n	8000b54 <fsm_simple_buttons_run+0xa0>
 8000b4c:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b09      	cmp	r3, #9
 8000b52:	dd5a      	ble.n	8000c0a <fsm_simple_buttons_run+0x156>
 8000b54:	4b30      	ldr	r3, [pc, #192]	; (8000c18 <fsm_simple_buttons_run+0x164>)
 8000b56:	2206      	movs	r2, #6
 8000b58:	601a      	str	r2, [r3, #0]
			break;
 8000b5a:	e056      	b.n	8000c0a <fsm_simple_buttons_run+0x156>

		case INC_LONG_PRESS:
			if(timer4_flag)
 8000b5c:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <fsm_simple_buttons_run+0x174>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d017      	beq.n	8000b94 <fsm_simple_buttons_run+0xe0>
			{
				timer4_flag = 0;
 8000b64:	4b30      	ldr	r3, [pc, #192]	; (8000c28 <fsm_simple_buttons_run+0x174>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f000 f8f2 	bl	8000d54 <setTimer4>
				Led7SegDisplayValue++;
 8000b70:	4b2c      	ldr	r3, [pc, #176]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	3301      	adds	r3, #1
 8000b76:	4a2b      	ldr	r2, [pc, #172]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b78:	6013      	str	r3, [r2, #0]
				if(Led7SegDisplayValue > 9){Led7SegDisplayValue=0;}
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	dd02      	ble.n	8000b88 <fsm_simple_buttons_run+0xd4>
 8000b82:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
				display7Seg(Led7SegDisplayValue,1);
 8000b88:	4b26      	ldr	r3, [pc, #152]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe68 	bl	8000864 <display7Seg>
			}
			if(key2HoldFlag == 0)
 8000b94:	4b25      	ldr	r3, [pc, #148]	; (8000c2c <fsm_simple_buttons_run+0x178>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d138      	bne.n	8000c0e <fsm_simple_buttons_run+0x15a>
			{
				status = WAITING;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <fsm_simple_buttons_run+0x164>)
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000ba2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ba6:	f000 f8a7 	bl	8000cf8 <setTimer3>
				break;
 8000baa:	e033      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
			}
			break;


		case DEC_LONG_PRESS:
			if(timer4_flag)
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <fsm_simple_buttons_run+0x174>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d017      	beq.n	8000be4 <fsm_simple_buttons_run+0x130>
			{
				timer4_flag = 0;
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <fsm_simple_buttons_run+0x174>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
				setTimer4(100);
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f000 f8ca 	bl	8000d54 <setTimer4>
				Led7SegDisplayValue--;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000bc8:	6013      	str	r3, [r2, #0]
				if(Led7SegDisplayValue < 0){Led7SegDisplayValue=9;}
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	da02      	bge.n	8000bd8 <fsm_simple_buttons_run+0x124>
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000bd4:	2209      	movs	r2, #9
 8000bd6:	601a      	str	r2, [r3, #0]
				display7Seg(Led7SegDisplayValue,1);
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <fsm_simple_buttons_run+0x170>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe40 	bl	8000864 <display7Seg>
			}
			if(key3HoldFlag == 0)
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <fsm_simple_buttons_run+0x17c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d112      	bne.n	8000c12 <fsm_simple_buttons_run+0x15e>
			{
				status = WAITING;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <fsm_simple_buttons_run+0x164>)
 8000bee:	2202      	movs	r2, #2
 8000bf0:	601a      	str	r2, [r3, #0]
				setTimer3(1000);
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f000 f87f 	bl	8000cf8 <setTimer3>
				break;
 8000bfa:	e00b      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
			}
			break;

		case STOP_STATE:
			key_press_check();
 8000bfc:	f7ff fee8 	bl	80009d0 <key_press_check>
			break;
 8000c00:	e008      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
		default:
			break;
 8000c02:	bf00      	nop
 8000c04:	e006      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
			break;
 8000c06:	bf00      	nop
 8000c08:	e004      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
			break;
 8000c0a:	bf00      	nop
 8000c0c:	e002      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
			break;
 8000c0e:	bf00      	nop
 8000c10:	e000      	b.n	8000c14 <fsm_simple_buttons_run+0x160>
			break;
 8000c12:	bf00      	nop
	}
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000030 	.word	0x20000030
 8000c1c:	20000094 	.word	0x20000094
 8000c20:	2000008c 	.word	0x2000008c
 8000c24:	20000080 	.word	0x20000080
 8000c28:	2000009c 	.word	0x2000009c
 8000c2c:	20000070 	.word	0x20000070
 8000c30:	2000007c 	.word	0x2000007c

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <setTimer1>:
int timer1_flag = 0;
int timer1_counter = 0;


void setTimer1(int duration)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8000c48:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <setTimer1+0x20>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c4e:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <setTimer1+0x24>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]


}
 8000c54:	bf00      	nop
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000088 	.word	0x20000088
 8000c64:	20000084 	.word	0x20000084

08000c68 <timer1Run>:

void timer1Run()
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0)
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <timer1Run+0x2c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dd0b      	ble.n	8000c8c <timer1Run+0x24>
	{
		timer1_counter--;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <timer1Run+0x2c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <timer1Run+0x2c>)
 8000c7c:	6013      	str	r3, [r2, #0]
		if(timer1_counter == 0)
 8000c7e:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <timer1Run+0x2c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d102      	bne.n	8000c8c <timer1Run+0x24>
		{
			timer1_flag = 1;
 8000c86:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <timer1Run+0x30>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000088 	.word	0x20000088
 8000c98:	20000084 	.word	0x20000084

08000c9c <setTimer2>:
int timer2_flag = 0;
int timer2_counter = 0;


void setTimer2(int duration)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8000ca4:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <setTimer2+0x20>)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <setTimer2+0x24>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]


}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000090 	.word	0x20000090
 8000cc0:	2000008c 	.word	0x2000008c

08000cc4 <timer2Run>:

void timer2Run()
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
	if(timer2_counter > 0)
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <timer2Run+0x2c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dd0b      	ble.n	8000ce8 <timer2Run+0x24>
	{
		timer2_counter--;
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <timer2Run+0x2c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <timer2Run+0x2c>)
 8000cd8:	6013      	str	r3, [r2, #0]
		if(timer2_counter == 0)
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <timer2Run+0x2c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d102      	bne.n	8000ce8 <timer2Run+0x24>
		{
			timer2_flag = 1;
 8000ce2:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <timer2Run+0x30>)
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	20000090 	.word	0x20000090
 8000cf4:	2000008c 	.word	0x2000008c

08000cf8 <setTimer3>:
int timer3_flag = 0;
int timer3_counter = 0;


void setTimer3(int duration)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 8000d00:	4a05      	ldr	r2, [pc, #20]	; (8000d18 <setTimer3+0x20>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <setTimer3+0x24>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]


}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000098 	.word	0x20000098
 8000d1c:	20000094 	.word	0x20000094

08000d20 <timer3Run>:

void timer3Run()
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
	if(timer3_counter > 0)
 8000d24:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <timer3Run+0x2c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	dd0b      	ble.n	8000d44 <timer3Run+0x24>
	{
		timer3_counter--;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <timer3Run+0x2c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	4a06      	ldr	r2, [pc, #24]	; (8000d4c <timer3Run+0x2c>)
 8000d34:	6013      	str	r3, [r2, #0]
		if(timer3_counter == 0)
 8000d36:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <timer3Run+0x2c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d102      	bne.n	8000d44 <timer3Run+0x24>
		{
			timer3_flag = 1;
 8000d3e:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <timer3Run+0x30>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	20000098 	.word	0x20000098
 8000d50:	20000094 	.word	0x20000094

08000d54 <setTimer4>:
int timer4_flag = 0;
int timer4_counter = 0;


void setTimer4(int duration)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8000d5c:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <setTimer4+0x20>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <setTimer4+0x24>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]


}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200000a0 	.word	0x200000a0
 8000d78:	2000009c 	.word	0x2000009c

08000d7c <timer4Run>:

void timer4Run()
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
	if(timer4_counter > 0)
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <timer4Run+0x2c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	dd0b      	ble.n	8000da0 <timer4Run+0x24>
	{
		timer4_counter--;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <timer4Run+0x2c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <timer4Run+0x2c>)
 8000d90:	6013      	str	r3, [r2, #0]
		if(timer4_counter == 0)
 8000d92:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <timer4Run+0x2c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d102      	bne.n	8000da0 <timer4Run+0x24>
		{
			timer4_flag = 1;
 8000d9a:	4b04      	ldr	r3, [pc, #16]	; (8000dac <timer4Run+0x30>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	200000a0 	.word	0x200000a0
 8000dac:	2000009c 	.word	0x2000009c

08000db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000db6:	4b15      	ldr	r3, [pc, #84]	; (8000e0c <HAL_MspInit+0x5c>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	4a14      	ldr	r2, [pc, #80]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6193      	str	r3, [r2, #24]
 8000dc2:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_MspInit+0x5c>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_MspInit+0x5c>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <HAL_MspInit+0x60>)
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	4a04      	ldr	r2, [pc, #16]	; (8000e10 <HAL_MspInit+0x60>)
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40010000 	.word	0x40010000

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d113      	bne.n	8000e4e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a0b      	ldr	r2, [pc, #44]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <HAL_TIM_Base_MspInit+0x44>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2100      	movs	r1, #0
 8000e42:	201c      	movs	r0, #28
 8000e44:	f000 f9a1 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e48:	201c      	movs	r0, #28
 8000e4a:	f000 f9ba 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <NMI_Handler+0x4>

08000e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <HardFault_Handler+0x4>

08000e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <MemManage_Handler+0x4>

08000e6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e72:	e7fe      	b.n	8000e72 <BusFault_Handler+0x4>

08000e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <UsageFault_Handler+0x4>

08000e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr

08000e9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea2:	f000 f87f 	bl	8000fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM2_IRQHandler+0x10>)
 8000eb2:	f000 ffe7 	bl	8001e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000a4 	.word	0x200000a4

08000ec0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ef2:	f7ff ffe5 	bl	8000ec0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f001 fb0d 	bl	8002514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efa:	f7ff fb53 	bl	80005a4 <main>
  bx lr
 8000efe:	4770      	bx	lr
  ldr r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f04:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000f08:	080025ac 	.word	0x080025ac
  ldr r2, =_sbss
 8000f0c:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8000f10:	200000f0 	.word	0x200000f0

08000f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC1_2_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_Init+0x28>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_Init+0x28>)
 8000f22:	f043 0310 	orr.w	r3, r3, #16
 8000f26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f923 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2e:	200f      	movs	r0, #15
 8000f30:	f000 f808 	bl	8000f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f34:	f7ff ff3c 	bl	8000db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40022000 	.word	0x40022000

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x54>)
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <HAL_InitTick+0x58>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f93b 	bl	80011de <HAL_SYSTICK_Config>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e00e      	b.n	8000f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b0f      	cmp	r3, #15
 8000f76:	d80a      	bhi.n	8000f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	6879      	ldr	r1, [r7, #4]
 8000f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f80:	f000 f903 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f84:	4a06      	ldr	r2, [pc, #24]	; (8000fa0 <HAL_InitTick+0x5c>)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e000      	b.n	8000f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000034 	.word	0x20000034
 8000f9c:	2000003c 	.word	0x2000003c
 8000fa0:	20000038 	.word	0x20000038

08000fa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <HAL_IncTick+0x1c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <HAL_IncTick+0x20>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <HAL_IncTick+0x20>)
 8000fb6:	6013      	str	r3, [r2, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	2000003c 	.word	0x2000003c
 8000fc4:	200000ec 	.word	0x200000ec

08000fc8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b02      	ldr	r3, [pc, #8]	; (8000fd8 <HAL_GetTick+0x10>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bc80      	pop	{r7}
 8000fd6:	4770      	bx	lr
 8000fd8:	200000ec 	.word	0x200000ec

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4906      	ldr	r1, [pc, #24]	; (8001074 <__NVIC_EnableIRQ+0x34>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff90 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	; (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff2d 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff42 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff35 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b08b      	sub	sp, #44	; 0x2c
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120a:	e148      	b.n	800149e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800120c:	2201      	movs	r2, #1
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	69fa      	ldr	r2, [r7, #28]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	429a      	cmp	r2, r3
 8001226:	f040 8137 	bne.w	8001498 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4aa3      	ldr	r2, [pc, #652]	; (80014bc <HAL_GPIO_Init+0x2c4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d05e      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001234:	4aa1      	ldr	r2, [pc, #644]	; (80014bc <HAL_GPIO_Init+0x2c4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d875      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800123a:	4aa1      	ldr	r2, [pc, #644]	; (80014c0 <HAL_GPIO_Init+0x2c8>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d058      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001240:	4a9f      	ldr	r2, [pc, #636]	; (80014c0 <HAL_GPIO_Init+0x2c8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d86f      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001246:	4a9f      	ldr	r2, [pc, #636]	; (80014c4 <HAL_GPIO_Init+0x2cc>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d052      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 800124c:	4a9d      	ldr	r2, [pc, #628]	; (80014c4 <HAL_GPIO_Init+0x2cc>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d869      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001252:	4a9d      	ldr	r2, [pc, #628]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d04c      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001258:	4a9b      	ldr	r2, [pc, #620]	; (80014c8 <HAL_GPIO_Init+0x2d0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d863      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800125e:	4a9b      	ldr	r2, [pc, #620]	; (80014cc <HAL_GPIO_Init+0x2d4>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d046      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
 8001264:	4a99      	ldr	r2, [pc, #612]	; (80014cc <HAL_GPIO_Init+0x2d4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d85d      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 800126a:	2b12      	cmp	r3, #18
 800126c:	d82a      	bhi.n	80012c4 <HAL_GPIO_Init+0xcc>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d859      	bhi.n	8001326 <HAL_GPIO_Init+0x12e>
 8001272:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <HAL_GPIO_Init+0x80>)
 8001274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001278:	080012f3 	.word	0x080012f3
 800127c:	080012cd 	.word	0x080012cd
 8001280:	080012df 	.word	0x080012df
 8001284:	08001321 	.word	0x08001321
 8001288:	08001327 	.word	0x08001327
 800128c:	08001327 	.word	0x08001327
 8001290:	08001327 	.word	0x08001327
 8001294:	08001327 	.word	0x08001327
 8001298:	08001327 	.word	0x08001327
 800129c:	08001327 	.word	0x08001327
 80012a0:	08001327 	.word	0x08001327
 80012a4:	08001327 	.word	0x08001327
 80012a8:	08001327 	.word	0x08001327
 80012ac:	08001327 	.word	0x08001327
 80012b0:	08001327 	.word	0x08001327
 80012b4:	08001327 	.word	0x08001327
 80012b8:	08001327 	.word	0x08001327
 80012bc:	080012d5 	.word	0x080012d5
 80012c0:	080012e9 	.word	0x080012e9
 80012c4:	4a82      	ldr	r2, [pc, #520]	; (80014d0 <HAL_GPIO_Init+0x2d8>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d013      	beq.n	80012f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ca:	e02c      	b.n	8001326 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	623b      	str	r3, [r7, #32]
          break;
 80012d2:	e029      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	3304      	adds	r3, #4
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e024      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	3308      	adds	r3, #8
 80012e4:	623b      	str	r3, [r7, #32]
          break;
 80012e6:	e01f      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	330c      	adds	r3, #12
 80012ee:	623b      	str	r3, [r7, #32]
          break;
 80012f0:	e01a      	b.n	8001328 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d102      	bne.n	8001300 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fa:	2304      	movs	r3, #4
 80012fc:	623b      	str	r3, [r7, #32]
          break;
 80012fe:	e013      	b.n	8001328 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d105      	bne.n	8001314 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001308:	2308      	movs	r3, #8
 800130a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	69fa      	ldr	r2, [r7, #28]
 8001310:	611a      	str	r2, [r3, #16]
          break;
 8001312:	e009      	b.n	8001328 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001314:	2308      	movs	r3, #8
 8001316:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	615a      	str	r2, [r3, #20]
          break;
 800131e:	e003      	b.n	8001328 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001320:	2300      	movs	r3, #0
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e000      	b.n	8001328 <HAL_GPIO_Init+0x130>
          break;
 8001326:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d801      	bhi.n	8001332 <HAL_GPIO_Init+0x13a>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	e001      	b.n	8001336 <HAL_GPIO_Init+0x13e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3304      	adds	r3, #4
 8001336:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	2bff      	cmp	r3, #255	; 0xff
 800133c:	d802      	bhi.n	8001344 <HAL_GPIO_Init+0x14c>
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	e002      	b.n	800134a <HAL_GPIO_Init+0x152>
 8001344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001346:	3b08      	subs	r3, #8
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	210f      	movs	r1, #15
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	6a39      	ldr	r1, [r7, #32]
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	fa01 f303 	lsl.w	r3, r1, r3
 8001364:	431a      	orrs	r2, r3
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	f000 8090 	beq.w	8001498 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001378:	4b56      	ldr	r3, [pc, #344]	; (80014d4 <HAL_GPIO_Init+0x2dc>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <HAL_GPIO_Init+0x2dc>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6193      	str	r3, [r2, #24]
 8001384:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_GPIO_Init+0x2dc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001390:	4a51      	ldr	r2, [pc, #324]	; (80014d8 <HAL_GPIO_Init+0x2e0>)
 8001392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800139c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	f003 0303 	and.w	r3, r3, #3
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4a49      	ldr	r2, [pc, #292]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d00d      	beq.n	80013d8 <HAL_GPIO_Init+0x1e0>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a48      	ldr	r2, [pc, #288]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d007      	beq.n	80013d4 <HAL_GPIO_Init+0x1dc>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a47      	ldr	r2, [pc, #284]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d101      	bne.n	80013d0 <HAL_GPIO_Init+0x1d8>
 80013cc:	2302      	movs	r3, #2
 80013ce:	e004      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013d0:	2303      	movs	r3, #3
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_GPIO_Init+0x1e2>
 80013d8:	2300      	movs	r3, #0
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	f002 0203 	and.w	r2, r2, #3
 80013e0:	0092      	lsls	r2, r2, #2
 80013e2:	4093      	lsls	r3, r2
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ea:	493b      	ldr	r1, [pc, #236]	; (80014d8 <HAL_GPIO_Init+0x2e0>)
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d006      	beq.n	8001412 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001404:	4b38      	ldr	r3, [pc, #224]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4937      	ldr	r1, [pc, #220]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4313      	orrs	r3, r2
 800140e:	600b      	str	r3, [r1, #0]
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001412:	4b35      	ldr	r3, [pc, #212]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	43db      	mvns	r3, r3
 800141a:	4933      	ldr	r1, [pc, #204]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800141c:	4013      	ands	r3, r2
 800141e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d006      	beq.n	800143a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800142c:	4b2e      	ldr	r3, [pc, #184]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	492d      	ldr	r1, [pc, #180]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
 8001438:	e006      	b.n	8001448 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800143a:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	43db      	mvns	r3, r3
 8001442:	4929      	ldr	r1, [pc, #164]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001444:	4013      	ands	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d006      	beq.n	8001462 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001454:	4b24      	ldr	r3, [pc, #144]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	4923      	ldr	r1, [pc, #140]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	43db      	mvns	r3, r3
 800146a:	491f      	ldr	r1, [pc, #124]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800146c:	4013      	ands	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d006      	beq.n	800148a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	4919      	ldr	r1, [pc, #100]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	4313      	orrs	r3, r2
 8001486:	60cb      	str	r3, [r1, #12]
 8001488:	e006      	b.n	8001498 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	43db      	mvns	r3, r3
 8001492:	4915      	ldr	r1, [pc, #84]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 8001494:	4013      	ands	r3, r2
 8001496:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	3301      	adds	r3, #1
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f47f aeaf 	bne.w	800120c <HAL_GPIO_Init+0x14>
  }
}
 80014ae:	bf00      	nop
 80014b0:	bf00      	nop
 80014b2:	372c      	adds	r7, #44	; 0x2c
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	10320000 	.word	0x10320000
 80014c0:	10310000 	.word	0x10310000
 80014c4:	10220000 	.word	0x10220000
 80014c8:	10210000 	.word	0x10210000
 80014cc:	10120000 	.word	0x10120000
 80014d0:	10110000 	.word	0x10110000
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000
 80014dc:	40010800 	.word	0x40010800
 80014e0:	40010c00 	.word	0x40010c00
 80014e4:	40011000 	.word	0x40011000
 80014e8:	40010400 	.word	0x40010400

080014ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e001      	b.n	800150e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800150a:	2300      	movs	r3, #0
 800150c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800150e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr

0800151a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
 8001526:	4613      	mov	r3, r2
 8001528:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800152a:	787b      	ldrb	r3, [r7, #1]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001536:	e003      	b.n	8001540 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001538:	887b      	ldrh	r3, [r7, #2]
 800153a:	041a      	lsls	r2, r3, #16
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	611a      	str	r2, [r3, #16]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800154a:	b480      	push	{r7}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
 8001552:	460b      	mov	r3, r1
 8001554:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800155c:	887a      	ldrh	r2, [r7, #2]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	4013      	ands	r3, r2
 8001562:	041a      	lsls	r2, r3, #16
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	43d9      	mvns	r1, r3
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	400b      	ands	r3, r1
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
}
 8001572:	bf00      	nop
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e26c      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 8087 	beq.w	80016aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800159c:	4b92      	ldr	r3, [pc, #584]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d00c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015a8:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	2b08      	cmp	r3, #8
 80015b2:	d112      	bne.n	80015da <HAL_RCC_OscConfig+0x5e>
 80015b4:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c0:	d10b      	bne.n	80015da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c2:	4b89      	ldr	r3, [pc, #548]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d06c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x12c>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d168      	bne.n	80016a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e246      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x76>
 80015e4:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a7f      	ldr	r2, [pc, #508]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	e02e      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x98>
 80015fa:	4b7b      	ldr	r3, [pc, #492]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a7a      	ldr	r2, [pc, #488]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001604:	6013      	str	r3, [r2, #0]
 8001606:	4b78      	ldr	r3, [pc, #480]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a77      	ldr	r2, [pc, #476]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e01d      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0xbc>
 800161e:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a71      	ldr	r2, [pc, #452]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e00b      	b.n	8001650 <HAL_RCC_OscConfig+0xd4>
 8001638:	4b6b      	ldr	r3, [pc, #428]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a6a      	ldr	r2, [pc, #424]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800163e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001642:	6013      	str	r3, [r2, #0]
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a67      	ldr	r2, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d013      	beq.n	8001680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fcb6 	bl	8000fc8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fcb2 	bl	8000fc8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e1fa      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001672:	4b5d      	ldr	r3, [pc, #372]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0xe4>
 800167e:	e014      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fca2 	bl	8000fc8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff fc9e 	bl	8000fc8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e1e6      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800169a:	4b53      	ldr	r3, [pc, #332]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x10c>
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d063      	beq.n	800177e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016b6:	4b4c      	ldr	r3, [pc, #304]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 030c 	and.w	r3, r3, #12
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d00b      	beq.n	80016da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80016c2:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 030c 	and.w	r3, r3, #12
 80016ca:	2b08      	cmp	r3, #8
 80016cc:	d11c      	bne.n	8001708 <HAL_RCC_OscConfig+0x18c>
 80016ce:	4b46      	ldr	r3, [pc, #280]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d116      	bne.n	8001708 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016da:	4b43      	ldr	r3, [pc, #268]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e1ba      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f2:	4b3d      	ldr	r3, [pc, #244]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695b      	ldr	r3, [r3, #20]
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4939      	ldr	r1, [pc, #228]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001706:	e03a      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d020      	beq.n	8001752 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001710:	4b36      	ldr	r3, [pc, #216]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001712:	2201      	movs	r2, #1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fc57 	bl	8000fc8 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fc53 	bl	8000fc8 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e19b      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001730:	4b2d      	ldr	r3, [pc, #180]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b2a      	ldr	r3, [pc, #168]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	695b      	ldr	r3, [r3, #20]
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	4927      	ldr	r1, [pc, #156]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
 8001750:	e015      	b.n	800177e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001752:	4b26      	ldr	r3, [pc, #152]	; (80017ec <HAL_RCC_OscConfig+0x270>)
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001758:	f7ff fc36 	bl	8000fc8 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001760:	f7ff fc32 	bl	8000fc8 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e17a      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1f0      	bne.n	8001760 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03a      	beq.n	8001800 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d019      	beq.n	80017c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <HAL_RCC_OscConfig+0x274>)
 8001794:	2201      	movs	r2, #1
 8001796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001798:	f7ff fc16 	bl	8000fc8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a0:	f7ff fc12 	bl	8000fc8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e15a      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017b2:	4b0d      	ldr	r3, [pc, #52]	; (80017e8 <HAL_RCC_OscConfig+0x26c>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 faa6 	bl	8001d10 <RCC_Delay>
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_RCC_OscConfig+0x274>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017cc:	f7ff fbfc 	bl	8000fc8 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d2:	e00f      	b.n	80017f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d4:	f7ff fbf8 	bl	8000fc8 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d908      	bls.n	80017f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e140      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
 80017e6:	bf00      	nop
 80017e8:	40021000 	.word	0x40021000
 80017ec:	42420000 	.word	0x42420000
 80017f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1e9      	bne.n	80017d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0304 	and.w	r3, r3, #4
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a6 	beq.w	800195a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b97      	ldr	r3, [pc, #604]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10d      	bne.n	800183a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b94      	ldr	r3, [pc, #592]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	4a93      	ldr	r2, [pc, #588]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001828:	61d3      	str	r3, [r2, #28]
 800182a:	4b91      	ldr	r3, [pc, #580]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800183a:	4b8e      	ldr	r3, [pc, #568]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d118      	bne.n	8001878 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001846:	4b8b      	ldr	r3, [pc, #556]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a8a      	ldr	r2, [pc, #552]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800184c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001852:	f7ff fbb9 	bl	8000fc8 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185a:	f7ff fbb5 	bl	8000fc8 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b64      	cmp	r3, #100	; 0x64
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e0fd      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4b81      	ldr	r3, [pc, #516]	; (8001a74 <HAL_RCC_OscConfig+0x4f8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x312>
 8001880:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	4a7a      	ldr	r2, [pc, #488]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6213      	str	r3, [r2, #32]
 800188c:	e02d      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x334>
 8001896:	4b76      	ldr	r3, [pc, #472]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001898:	6a1b      	ldr	r3, [r3, #32]
 800189a:	4a75      	ldr	r2, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	6213      	str	r3, [r2, #32]
 80018a2:	4b73      	ldr	r3, [pc, #460]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	6a1b      	ldr	r3, [r3, #32]
 80018a6:	4a72      	ldr	r2, [pc, #456]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018a8:	f023 0304 	bic.w	r3, r3, #4
 80018ac:	6213      	str	r3, [r2, #32]
 80018ae:	e01c      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d10c      	bne.n	80018d2 <HAL_RCC_OscConfig+0x356>
 80018b8:	4b6d      	ldr	r3, [pc, #436]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	4a6c      	ldr	r2, [pc, #432]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	6213      	str	r3, [r2, #32]
 80018c4:	4b6a      	ldr	r3, [pc, #424]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4a69      	ldr	r2, [pc, #420]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	6213      	str	r3, [r2, #32]
 80018d0:	e00b      	b.n	80018ea <HAL_RCC_OscConfig+0x36e>
 80018d2:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	4a66      	ldr	r2, [pc, #408]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	6213      	str	r3, [r2, #32]
 80018de:	4b64      	ldr	r3, [pc, #400]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a63      	ldr	r2, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80018e4:	f023 0304 	bic.w	r3, r3, #4
 80018e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d015      	beq.n	800191e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff fb69 	bl	8000fc8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff fb65 	bl	8000fc8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0ab      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001910:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0ee      	beq.n	80018fa <HAL_RCC_OscConfig+0x37e>
 800191c:	e014      	b.n	8001948 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fb53 	bl	8000fc8 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff fb4f 	bl	8000fc8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e095      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193c:	4b4c      	ldr	r3, [pc, #304]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800193e:	6a1b      	ldr	r3, [r3, #32]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d1ee      	bne.n	8001926 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d105      	bne.n	800195a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194e:	4b48      	ldr	r3, [pc, #288]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	4a47      	ldr	r2, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8081 	beq.w	8001a66 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b42      	ldr	r3, [pc, #264]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	d061      	beq.n	8001a34 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d146      	bne.n	8001a06 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b3f      	ldr	r3, [pc, #252]	; (8001a78 <HAL_RCC_OscConfig+0x4fc>)
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197e:	f7ff fb23 	bl	8000fc8 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001984:	e008      	b.n	8001998 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001986:	f7ff fb1f 	bl	8000fc8 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d901      	bls.n	8001998 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001994:	2303      	movs	r3, #3
 8001996:	e067      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f0      	bne.n	8001986 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ac:	d108      	bne.n	80019c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	492d      	ldr	r1, [pc, #180]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c0:	4b2b      	ldr	r3, [pc, #172]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a19      	ldr	r1, [r3, #32]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	430b      	orrs	r3, r1
 80019d2:	4927      	ldr	r1, [pc, #156]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x4fc>)
 80019da:	2201      	movs	r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff faf3 	bl	8000fc8 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff faef 	bl	8000fc8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e037      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46a>
 8001a04:	e02f      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <HAL_RCC_OscConfig+0x4fc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fadc 	bl	8000fc8 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a14:	f7ff fad8 	bl	8000fc8 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e020      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x498>
 8001a32:	e018      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69db      	ldr	r3, [r3, #28]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e013      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d001      	beq.n	8001a66 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e000      	b.n	8001a68 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40007000 	.word	0x40007000
 8001a78:	42420060 	.word	0x42420060

08001a7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0d0      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d910      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 0207 	bic.w	r2, r3, #7
 8001aa6:	4965      	ldr	r1, [pc, #404]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0b8      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d020      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0304 	and.w	r3, r3, #4
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad8:	4b59      	ldr	r3, [pc, #356]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ae2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	4a52      	ldr	r2, [pc, #328]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001af6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001afa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b50      	ldr	r3, [pc, #320]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	494d      	ldr	r1, [pc, #308]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d040      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d107      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b47      	ldr	r3, [pc, #284]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d115      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e07f      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b41      	ldr	r3, [pc, #260]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e073      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3d      	ldr	r3, [pc, #244]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e06b      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4936      	ldr	r1, [pc, #216]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff fa2c 	bl	8000fc8 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff fa28 	bl	8000fc8 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e053      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d210      	bcs.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4922      	ldr	r1, [pc, #136]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e032      	b.n	8001c32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0304 	and.w	r3, r3, #4
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4916      	ldr	r1, [pc, #88]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0308 	and.w	r3, r3, #8
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c0a:	f000 f821 	bl	8001c50 <HAL_RCC_GetSysClockFreq>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	091b      	lsrs	r3, r3, #4
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	490a      	ldr	r1, [pc, #40]	; (8001c44 <HAL_RCC_ClockConfig+0x1c8>)
 8001c1c:	5ccb      	ldrb	r3, [r1, r3]
 8001c1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1cc>)
 8001c24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_ClockConfig+0x1d0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f98a 	bl	8000f44 <HAL_InitTick>

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08002594 	.word	0x08002594
 8001c48:	20000034 	.word	0x20000034
 8001c4c:	20000038 	.word	0x20000038

08001c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c50:	b490      	push	{r4, r7}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c56:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c58:	1d3c      	adds	r4, r7, #4
 8001c5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c60:	f240 2301 	movw	r3, #513	; 0x201
 8001c64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f003 030c 	and.w	r3, r3, #12
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	d002      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x40>
 8001c8a:	2b08      	cmp	r3, #8
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0x46>
 8001c8e:	e02d      	b.n	8001cec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c92:	623b      	str	r3, [r7, #32]
      break;
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	0c9b      	lsrs	r3, r3, #18
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ca8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cb4:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c5b      	lsrs	r3, r3, #17
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cc2:	4413      	add	r3, r2
 8001cc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cc8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cce:	fb02 f203 	mul.w	r2, r2, r3
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001cda:	e004      	b.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	4a0b      	ldr	r2, [pc, #44]	; (8001d0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	623b      	str	r3, [r7, #32]
      break;
 8001cea:	e002      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cee:	623b      	str	r3, [r7, #32]
      break;
 8001cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf2:	6a3b      	ldr	r3, [r7, #32]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc90      	pop	{r4, r7}
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	08002584 	.word	0x08002584
 8001d04:	40021000 	.word	0x40021000
 8001d08:	007a1200 	.word	0x007a1200
 8001d0c:	003d0900 	.word	0x003d0900

08001d10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <RCC_Delay+0x34>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	; (8001d48 <RCC_Delay+0x38>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	0a5b      	lsrs	r3, r3, #9
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	fb02 f303 	mul.w	r3, r2, r3
 8001d2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d2c:	bf00      	nop
  }
  while (Delay --);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	60fa      	str	r2, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f9      	bne.n	8001d2c <RCC_Delay+0x1c>
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3714      	adds	r7, #20
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000034 	.word	0x20000034
 8001d48:	10624dd3 	.word	0x10624dd3

08001d4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e041      	b.n	8001de2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d106      	bne.n	8001d78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f7ff f84e 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3304      	adds	r3, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f000 fa6a 	bl	8002264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
	...

08001dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d001      	beq.n	8001e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e035      	b.n	8001e70 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_TIM_Base_Start_IT+0x90>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d009      	beq.n	8001e3a <HAL_TIM_Base_Start_IT+0x4e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2e:	d004      	beq.n	8001e3a <HAL_TIM_Base_Start_IT+0x4e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <HAL_TIM_Base_Start_IT+0x94>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d111      	bne.n	8001e5e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b06      	cmp	r3, #6
 8001e4a:	d010      	beq.n	8001e6e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5c:	e007      	b.n	8001e6e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0201 	orr.w	r2, r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40012c00 	.word	0x40012c00
 8001e80:	40000400 	.word	0x40000400

08001e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d122      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0202 	mvn.w	r2, #2
 8001eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699b      	ldr	r3, [r3, #24]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f9b1 	bl	800222e <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f9a4 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f9b3 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f003 0304 	and.w	r3, r3, #4
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	d122      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d11b      	bne.n	8001f34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0204 	mvn.w	r2, #4
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f987 	bl	800222e <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f97a 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f989 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d122      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d11b      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0208 	mvn.w	r2, #8
 8001f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f003 0303 	and.w	r3, r3, #3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f95d 	bl	800222e <HAL_TIM_IC_CaptureCallback>
 8001f74:	e005      	b.n	8001f82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f950 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f95f 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b10      	cmp	r3, #16
 8001f94:	d122      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b10      	cmp	r3, #16
 8001fa2:	d11b      	bne.n	8001fdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0210 	mvn.w	r2, #16
 8001fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f933 	bl	800222e <HAL_TIM_IC_CaptureCallback>
 8001fc8:	e005      	b.n	8001fd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f926 	bl	800221c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f935 	bl	8002240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10e      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f003 0301 	and.w	r3, r3, #1
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d107      	bne.n	8002008 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0201 	mvn.w	r2, #1
 8002000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fc18 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002012:	2b80      	cmp	r3, #128	; 0x80
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d107      	bne.n	8002034 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800202c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 fa67 	bl	8002502 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203e:	2b40      	cmp	r3, #64	; 0x40
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d107      	bne.n	8002060 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8f9 	bl	8002252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b20      	cmp	r3, #32
 800206c:	d10e      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0320 	and.w	r3, r3, #32
 8002078:	2b20      	cmp	r3, #32
 800207a:	d107      	bne.n	800208c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0220 	mvn.w	r2, #32
 8002084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 fa32 	bl	80024f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_TIM_ConfigClockSource+0x18>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e0b3      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x180>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e4:	d03e      	beq.n	8002164 <HAL_TIM_ConfigClockSource+0xd0>
 80020e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020ea:	f200 8087 	bhi.w	80021fc <HAL_TIM_ConfigClockSource+0x168>
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f2:	f000 8085 	beq.w	8002200 <HAL_TIM_ConfigClockSource+0x16c>
 80020f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020fa:	d87f      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 80020fc:	2b70      	cmp	r3, #112	; 0x70
 80020fe:	d01a      	beq.n	8002136 <HAL_TIM_ConfigClockSource+0xa2>
 8002100:	2b70      	cmp	r3, #112	; 0x70
 8002102:	d87b      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 8002104:	2b60      	cmp	r3, #96	; 0x60
 8002106:	d050      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x116>
 8002108:	2b60      	cmp	r3, #96	; 0x60
 800210a:	d877      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 800210c:	2b50      	cmp	r3, #80	; 0x50
 800210e:	d03c      	beq.n	800218a <HAL_TIM_ConfigClockSource+0xf6>
 8002110:	2b50      	cmp	r3, #80	; 0x50
 8002112:	d873      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d058      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x136>
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d86f      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 800211c:	2b30      	cmp	r3, #48	; 0x30
 800211e:	d064      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x156>
 8002120:	2b30      	cmp	r3, #48	; 0x30
 8002122:	d86b      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 8002124:	2b20      	cmp	r3, #32
 8002126:	d060      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x156>
 8002128:	2b20      	cmp	r3, #32
 800212a:	d867      	bhi.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
 800212c:	2b00      	cmp	r3, #0
 800212e:	d05c      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x156>
 8002130:	2b10      	cmp	r3, #16
 8002132:	d05a      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002134:	e062      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f000 f95c 	bl	8002402 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002158:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	609a      	str	r2, [r3, #8]
      break;
 8002162:	e04e      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f000 f945 	bl	8002402 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002186:	609a      	str	r2, [r3, #8]
      break;
 8002188:	e03b      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	6859      	ldr	r1, [r3, #4]
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	461a      	mov	r2, r3
 8002198:	f000 f8bc 	bl	8002314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2150      	movs	r1, #80	; 0x50
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f913 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 80021a8:	e02b      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f000 f8da 	bl	8002370 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2160      	movs	r1, #96	; 0x60
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f903 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 80021c8:	e01b      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	461a      	mov	r2, r3
 80021d8:	f000 f89c 	bl	8002314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2140      	movs	r1, #64	; 0x40
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f8f3 	bl	80023ce <TIM_ITRx_SetConfig>
      break;
 80021e8:	e00b      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f000 f8ea 	bl	80023ce <TIM_ITRx_SetConfig>
        break;
 80021fa:	e002      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80021fc:	bf00      	nop
 80021fe:	e000      	b.n	8002202 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002200:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002212:	2300      	movs	r3, #0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3710      	adds	r7, #16
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bc80      	pop	{r7}
 800223e:	4770      	bx	lr

08002240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr

08002264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a25      	ldr	r2, [pc, #148]	; (800230c <TIM_Base_SetConfig+0xa8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <TIM_Base_SetConfig+0x28>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d003      	beq.n	800228c <TIM_Base_SetConfig+0x28>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a22      	ldr	r2, [pc, #136]	; (8002310 <TIM_Base_SetConfig+0xac>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d108      	bne.n	800229e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1a      	ldr	r2, [pc, #104]	; (800230c <TIM_Base_SetConfig+0xa8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0x52>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0x52>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <TIM_Base_SetConfig+0xac>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a07      	ldr	r2, [pc, #28]	; (800230c <TIM_Base_SetConfig+0xa8>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d103      	bne.n	80022fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	615a      	str	r2, [r3, #20]
}
 8002302:	bf00      	nop
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40000400 	.word	0x40000400

08002314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	f023 0201 	bic.w	r2, r3, #1
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800233e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f023 030a 	bic.w	r3, r3, #10
 8002350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
 8002358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	621a      	str	r2, [r3, #32]
}
 8002366:	bf00      	nop
 8002368:	371c      	adds	r7, #28
 800236a:	46bd      	mov	sp, r7
 800236c:	bc80      	pop	{r7}
 800236e:	4770      	bx	lr

08002370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	f023 0210 	bic.w	r2, r3, #16
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800239a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	031b      	lsls	r3, r3, #12
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	011b      	lsls	r3, r3, #4
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	621a      	str	r2, [r3, #32]
}
 80023c4:	bf00      	nop
 80023c6:	371c      	adds	r7, #28
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr

080023ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b085      	sub	sp, #20
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f043 0307 	orr.w	r3, r3, #7
 80023f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	609a      	str	r2, [r3, #8]
}
 80023f8:	bf00      	nop
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr

08002402 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002402:	b480      	push	{r7}
 8002404:	b087      	sub	sp, #28
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	021a      	lsls	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	431a      	orrs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4313      	orrs	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	609a      	str	r2, [r3, #8]
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr

08002440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002454:	2302      	movs	r3, #2
 8002456:	e041      	b.n	80024dc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800247e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d009      	beq.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024a4:	d004      	beq.n	80024b0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a10      	ldr	r2, [pc, #64]	; (80024ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d10c      	bne.n	80024ca <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3714      	adds	r7, #20
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40012c00 	.word	0x40012c00
 80024ec:	40000400 	.word	0x40000400

080024f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr

08002502 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <__libc_init_array>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	2600      	movs	r6, #0
 8002518:	4d0c      	ldr	r5, [pc, #48]	; (800254c <__libc_init_array+0x38>)
 800251a:	4c0d      	ldr	r4, [pc, #52]	; (8002550 <__libc_init_array+0x3c>)
 800251c:	1b64      	subs	r4, r4, r5
 800251e:	10a4      	asrs	r4, r4, #2
 8002520:	42a6      	cmp	r6, r4
 8002522:	d109      	bne.n	8002538 <__libc_init_array+0x24>
 8002524:	f000 f822 	bl	800256c <_init>
 8002528:	2600      	movs	r6, #0
 800252a:	4d0a      	ldr	r5, [pc, #40]	; (8002554 <__libc_init_array+0x40>)
 800252c:	4c0a      	ldr	r4, [pc, #40]	; (8002558 <__libc_init_array+0x44>)
 800252e:	1b64      	subs	r4, r4, r5
 8002530:	10a4      	asrs	r4, r4, #2
 8002532:	42a6      	cmp	r6, r4
 8002534:	d105      	bne.n	8002542 <__libc_init_array+0x2e>
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	f855 3b04 	ldr.w	r3, [r5], #4
 800253c:	4798      	blx	r3
 800253e:	3601      	adds	r6, #1
 8002540:	e7ee      	b.n	8002520 <__libc_init_array+0xc>
 8002542:	f855 3b04 	ldr.w	r3, [r5], #4
 8002546:	4798      	blx	r3
 8002548:	3601      	adds	r6, #1
 800254a:	e7f2      	b.n	8002532 <__libc_init_array+0x1e>
 800254c:	080025a4 	.word	0x080025a4
 8002550:	080025a4 	.word	0x080025a4
 8002554:	080025a4 	.word	0x080025a4
 8002558:	080025a8 	.word	0x080025a8

0800255c <memset>:
 800255c:	4603      	mov	r3, r0
 800255e:	4402      	add	r2, r0
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <memset+0xa>
 8002564:	4770      	bx	lr
 8002566:	f803 1b01 	strb.w	r1, [r3], #1
 800256a:	e7f9      	b.n	8002560 <memset+0x4>

0800256c <_init>:
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256e:	bf00      	nop
 8002570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002572:	bc08      	pop	{r3}
 8002574:	469e      	mov	lr, r3
 8002576:	4770      	bx	lr

08002578 <_fini>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr
